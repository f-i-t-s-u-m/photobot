{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["file:///C:/Project/Fiba/photobot/node_modules/node-telegram-bot-api/src/utils.js"],"sourcesContent":["const util = require('util');\n// Native deprecation warning\nexports.deprecate = (msg) => util.deprecate(() => { }, msg, 'node-telegram-bot-api')();\n"],"names":[],"mappings":"AAAA,MAAM;AACN,6BAA6B;AAC7B,QAAQ,SAAS,GAAG,CAAC,MAAQ,KAAK,SAAS,CAAC,KAAQ,GAAG,KAAK","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 14, "column": 0}, "map": {"version":3,"sources":["file:///C:/Project/Fiba/photobot/node_modules/node-telegram-bot-api/lib/errors.js"],"sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nexports.BaseError = function (_Error) {\n  _inherits(BaseError, _Error);\n\n  /**\n   * @class BaseError\n   * @constructor\n   * @private\n   * @param  {String} code Error code\n   * @param  {String} message Error message\n   */\n  function BaseError(code, message) {\n    _classCallCheck(this, BaseError);\n\n    var _this = _possibleConstructorReturn(this, (BaseError.__proto__ || Object.getPrototypeOf(BaseError)).call(this, code + ': ' + message));\n\n    _this.code = code;\n    return _this;\n  }\n\n  _createClass(BaseError, [{\n    key: 'toJSON',\n    value: function toJSON() {\n      return {\n        code: this.code,\n        message: this.message\n      };\n    }\n  }]);\n\n  return BaseError;\n}(Error);\n\nexports.FatalError = function (_exports$BaseError) {\n  _inherits(FatalError, _exports$BaseError);\n\n  /**\n   * Fatal Error. Error code is `\"EFATAL\"`.\n   * @class FatalError\n   * @constructor\n   * @param  {String|Error} data Error object or message\n   */\n  function FatalError(data) {\n    _classCallCheck(this, FatalError);\n\n    var error = typeof data === 'string' ? null : data;\n    var message = error ? error.message : data;\n\n    var _this2 = _possibleConstructorReturn(this, (FatalError.__proto__ || Object.getPrototypeOf(FatalError)).call(this, 'EFATAL', message));\n\n    if (error) _this2.stack = error.stack;\n    return _this2;\n  }\n\n  return FatalError;\n}(exports.BaseError);\n\nexports.ParseError = function (_exports$BaseError2) {\n  _inherits(ParseError, _exports$BaseError2);\n\n  /**\n   * Error during parsing. Error code is `\"EPARSE\"`.\n   * @class ParseError\n   * @constructor\n   * @param  {String} message Error message\n   * @param  {http.IncomingMessage} response Server response\n   */\n  function ParseError(message, response) {\n    _classCallCheck(this, ParseError);\n\n    var _this3 = _possibleConstructorReturn(this, (ParseError.__proto__ || Object.getPrototypeOf(ParseError)).call(this, 'EPARSE', message));\n\n    _this3.response = response;\n    return _this3;\n  }\n\n  return ParseError;\n}(exports.BaseError);\n\nexports.TelegramError = function (_exports$BaseError3) {\n  _inherits(TelegramError, _exports$BaseError3);\n\n  /**\n   * Error returned from Telegram. Error code is `\"ETELEGRAM\"`.\n   * @class TelegramError\n   * @constructor\n   * @param  {String} message Error message\n   * @param  {http.IncomingMessage} response Server response\n   */\n  function TelegramError(message, response) {\n    _classCallCheck(this, TelegramError);\n\n    var _this4 = _possibleConstructorReturn(this, (TelegramError.__proto__ || Object.getPrototypeOf(TelegramError)).call(this, 'ETELEGRAM', message));\n\n    _this4.response = response;\n    return _this4;\n  }\n\n  return TelegramError;\n}(exports.BaseError);"],"names":[],"mappings":"AAAA;AAEA,IAAI,eAAe;IAAc,SAAS,iBAAiB,MAAM,EAAE,KAAK;QAAI,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,IAAK;YAAE,IAAI,aAAa,KAAK,CAAC,EAAE;YAAE,WAAW,UAAU,GAAG,WAAW,UAAU,IAAI;YAAO,WAAW,YAAY,GAAG;YAAM,IAAI,WAAW,YAAY,WAAW,QAAQ,GAAG;YAAM,OAAO,cAAc,CAAC,QAAQ,WAAW,GAAG,EAAE;QAAa;IAAE;IAAE,OAAO,SAAU,WAAW,EAAE,UAAU,EAAE,WAAW;QAAI,IAAI,YAAY,iBAAiB,YAAY,SAAS,EAAE;QAAa,IAAI,aAAa,iBAAiB,aAAa;QAAc,OAAO;IAAa;AAAG;AAEhjB,SAAS,gBAAgB,QAAQ,EAAE,WAAW;IAAI,IAAI,CAAC,CAAC,oBAAoB,WAAW,GAAG;QAAE,MAAM,IAAI,UAAU;IAAsC;AAAE;AAExJ,SAAS,2BAA2B,IAAI,EAAE,IAAI;IAAI,IAAI,CAAC,MAAM;QAAE,MAAM,IAAI,eAAe;IAA8D;IAAE,OAAO,QAAQ,CAAC,OAAO,SAAS,YAAY,OAAO,SAAS,UAAU,IAAI,OAAO;AAAM;AAE/O,SAAS,UAAU,QAAQ,EAAE,UAAU;IAAI,IAAI,OAAO,eAAe,cAAc,eAAe,MAAM;QAAE,MAAM,IAAI,UAAU,6DAA6D,OAAO;IAAa;IAAE,SAAS,SAAS,GAAG,OAAO,MAAM,CAAC,cAAc,WAAW,SAAS,EAAE;QAAE,aAAa;YAAE,OAAO;YAAU,YAAY;YAAO,UAAU;YAAM,cAAc;QAAK;IAAE;IAAI,IAAI,YAAY,OAAO,cAAc,GAAG,OAAO,cAAc,CAAC,UAAU,cAAc,SAAS,SAAS,GAAG;AAAY;AAE7e,QAAQ,SAAS,GAAG,SAAU,MAAM;IAClC,UAAU,WAAW;IAErB;;;;;;GAMC,GACD,SAAS,UAAU,IAAI,EAAE,OAAO;QAC9B,gBAAgB,IAAI,EAAE;QAEtB,IAAI,QAAQ,2BAA2B,IAAI,EAAE,CAAC,UAAU,SAAS,IAAI,OAAO,cAAc,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,EAAE,OAAO,OAAO;QAEhI,MAAM,IAAI,GAAG;QACb,OAAO;IACT;IAEA,aAAa,WAAW;QAAC;YACvB,KAAK;YACL,OAAO,SAAS;gBACd,OAAO;oBACL,MAAM,IAAI,CAAC,IAAI;oBACf,SAAS,IAAI,CAAC,OAAO;gBACvB;YACF;QACF;KAAE;IAEF,OAAO;AACT,EAAE;AAEF,QAAQ,UAAU,GAAG,SAAU,kBAAkB;IAC/C,UAAU,YAAY;IAEtB;;;;;GAKC,GACD,SAAS,WAAW,IAAI;QACtB,gBAAgB,IAAI,EAAE;QAEtB,IAAI,QAAQ,OAAO,SAAS,WAAW,OAAO;QAC9C,IAAI,UAAU,QAAQ,MAAM,OAAO,GAAG;QAEtC,IAAI,SAAS,2BAA2B,IAAI,EAAE,CAAC,WAAW,SAAS,IAAI,OAAO,cAAc,CAAC,WAAW,EAAE,IAAI,CAAC,IAAI,EAAE,UAAU;QAE/H,IAAI,OAAO,OAAO,KAAK,GAAG,MAAM,KAAK;QACrC,OAAO;IACT;IAEA,OAAO;AACT,EAAE,QAAQ,SAAS;AAEnB,QAAQ,UAAU,GAAG,SAAU,mBAAmB;IAChD,UAAU,YAAY;IAEtB;;;;;;GAMC,GACD,SAAS,WAAW,OAAO,EAAE,QAAQ;QACnC,gBAAgB,IAAI,EAAE;QAEtB,IAAI,SAAS,2BAA2B,IAAI,EAAE,CAAC,WAAW,SAAS,IAAI,OAAO,cAAc,CAAC,WAAW,EAAE,IAAI,CAAC,IAAI,EAAE,UAAU;QAE/H,OAAO,QAAQ,GAAG;QAClB,OAAO;IACT;IAEA,OAAO;AACT,EAAE,QAAQ,SAAS;AAEnB,QAAQ,aAAa,GAAG,SAAU,mBAAmB;IACnD,UAAU,eAAe;IAEzB;;;;;;GAMC,GACD,SAAS,cAAc,OAAO,EAAE,QAAQ;QACtC,gBAAgB,IAAI,EAAE;QAEtB,IAAI,SAAS,2BAA2B,IAAI,EAAE,CAAC,cAAc,SAAS,IAAI,OAAO,cAAc,CAAC,cAAc,EAAE,IAAI,CAAC,IAAI,EAAE,aAAa;QAExI,OAAO,QAAQ,GAAG;QAClB,OAAO;IACT;IAEA,OAAO;AACT,EAAE,QAAQ,SAAS","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 137, "column": 0}, "map": {"version":3,"sources":["file:///C:/Project/Fiba/photobot/node_modules/node-telegram-bot-api/lib/telegramWebHook.js"],"sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar errors = require('./errors');\nvar debug = require('debug')('node-telegram-bot-api');\nvar https = require('https');\nvar http = require('http');\nvar fs = require('fs');\nvar bl = require('bl');\n\nvar TelegramBotWebHook = function () {\n  /**\n   * Sets up a webhook to receive updates\n   * @param  {TelegramBot} bot\n   * @see https://core.telegram.org/bots/api#getting-updates\n   */\n  function TelegramBotWebHook(bot) {\n    _classCallCheck(this, TelegramBotWebHook);\n\n    this.bot = bot;\n    this.options = typeof bot.options.webHook === 'boolean' ? {} : bot.options.webHook;\n    this.options.host = this.options.host || '0.0.0.0';\n    this.options.port = this.options.port || 8443;\n    this.options.https = this.options.https || {};\n    this.options.healthEndpoint = this.options.healthEndpoint || '/healthz';\n    this._healthRegex = new RegExp(this.options.healthEndpoint);\n    this._webServer = null;\n    this._open = false;\n    this._requestListener = this._requestListener.bind(this);\n    this._parseBody = this._parseBody.bind(this);\n\n    if (this.options.key && this.options.cert) {\n      debug('HTTPS WebHook enabled (by key/cert)');\n      this.options.https.key = fs.readFileSync(this.options.key);\n      this.options.https.cert = fs.readFileSync(this.options.cert);\n      this._webServer = https.createServer(this.options.https, this._requestListener);\n    } else if (this.options.pfx) {\n      debug('HTTPS WebHook enabled (by pfx)');\n      this.options.https.pfx = fs.readFileSync(this.options.pfx);\n      this._webServer = https.createServer(this.options.https, this._requestListener);\n    } else if (Object.keys(this.options.https).length) {\n      debug('HTTPS WebHook enabled by (https)');\n      this._webServer = https.createServer(this.options.https, this._requestListener);\n    } else {\n      debug('HTTP WebHook enabled');\n      this._webServer = http.createServer(this._requestListener);\n    }\n  }\n\n  /**\n   * Open WebHook by listening on the port\n   * @return {Promise}\n   */\n\n\n  _createClass(TelegramBotWebHook, [{\n    key: 'open',\n    value: function open() {\n      var _this = this;\n\n      if (this.isOpen()) {\n        return Promise.resolve();\n      }\n      return new Promise(function (resolve, reject) {\n        _this._webServer.listen(_this.options.port, _this.options.host, function () {\n          debug('WebHook listening on port %s', _this.options.port);\n          _this._open = true;\n          return resolve();\n        });\n\n        _this._webServer.once('error', function (err) {\n          reject(err);\n        });\n      });\n    }\n\n    /**\n     * Close the webHook\n     * @return {Promise}\n     */\n\n  }, {\n    key: 'close',\n    value: function close() {\n      var _this2 = this;\n\n      if (!this.isOpen()) {\n        return Promise.resolve();\n      }\n      return new Promise(function (resolve, reject) {\n        _this2._webServer.close(function (error) {\n          if (error) return reject(error);\n          _this2._open = false;\n          return resolve();\n        });\n      });\n    }\n\n    /**\n     * Return `true` if server is listening. Otherwise, `false`.\n     */\n\n  }, {\n    key: 'isOpen',\n    value: function isOpen() {\n      // NOTE: Since `http.Server.listening` was added in v5.7.0\n      // and we still need to support Node v4,\n      // we are going to fallback to 'this._open'.\n      // The following LOC would suffice for newer versions of Node.js\n      // return this._webServer.listening;\n      return this._open;\n    }\n\n    /**\n     * Handle error thrown during processing of webhook request.\n     * @private\n     * @param  {Error} error\n     */\n\n  }, {\n    key: '_error',\n    value: function _error(error) {\n      if (!this.bot.listeners('webhook_error').length) {\n        return console.error('error: [webhook_error] %j', error); // eslint-disable-line no-console\n      }\n      return this.bot.emit('webhook_error', error);\n    }\n\n    /**\n     * Handle request body by passing it to 'callback'\n     * @private\n     */\n\n  }, {\n    key: '_parseBody',\n    value: function _parseBody(error, body) {\n      if (error) {\n        return this._error(new errors.FatalError(error));\n      }\n\n      var data = void 0;\n      try {\n        data = JSON.parse(body.toString());\n      } catch (parseError) {\n        return this._error(new errors.ParseError(parseError.message));\n      }\n\n      return this.bot.processUpdate(data);\n    }\n\n    /**\n     * Listener for 'request' event on server\n     * @private\n     * @see https://nodejs.org/docs/latest/api/http.html#http_http_createserver_requestlistener\n     * @see https://nodejs.org/docs/latest/api/https.html#https_https_createserver_options_requestlistener\n     */\n\n  }, {\n    key: '_requestListener',\n    value: function _requestListener(req, res) {\n      debug('WebHook request URL: %s', req.url);\n      debug('WebHook request headers: %j', req.headers);\n\n      if (req.url.indexOf(this.bot.token) !== -1) {\n        if (req.method !== 'POST') {\n          debug('WebHook request isn\\'t a POST');\n          res.statusCode = 418; // I'm a teabot!\n          res.end();\n        } else {\n          req.pipe(bl(this._parseBody)).on('finish', function () {\n            return res.end('OK');\n          });\n        }\n      } else if (this._healthRegex.test(req.url)) {\n        debug('WebHook health check passed');\n        res.statusCode = 200;\n        res.end('OK');\n      } else {\n        debug('WebHook request unauthorized');\n        res.statusCode = 401;\n        res.end();\n      }\n    }\n  }]);\n\n  return TelegramBotWebHook;\n}();\n\nmodule.exports = TelegramBotWebHook;"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 309, "column": 0}, "map": {"version":3,"sources":["file:///C:/Project/Fiba/photobot/node_modules/node-telegram-bot-api/lib/utils.js"],"sourcesContent":["'use strict';\n\nvar util = require('util');\n// Native deprecation warning\nexports.deprecate = function (msg) {\n  return util.deprecate(function () {}, msg, 'node-telegram-bot-api')();\n};"],"names":[],"mappings":"AAAA;AAEA,IAAI;AACJ,6BAA6B;AAC7B,QAAQ,SAAS,GAAG,SAAU,GAAG;IAC/B,OAAO,KAAK,SAAS,CAAC,YAAa,GAAG,KAAK;AAC7C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 320, "column": 0}, "map": {"version":3,"sources":["file:///C:/Project/Fiba/photobot/node_modules/node-telegram-bot-api/lib/telegramPolling.js"],"sourcesContent":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar errors = require('./errors');\nvar debug = require('debug')('node-telegram-bot-api');\nvar deprecate = require('./utils').deprecate;\nvar ANOTHER_WEB_HOOK_USED = 409;\n\nvar TelegramBotPolling = function () {\n  /**\n   * Handles polling against the Telegram servers.\n   * @param  {TelegramBot} bot\n   * @see https://core.telegram.org/bots/api#getting-updates\n   */\n  function TelegramBotPolling(bot) {\n    _classCallCheck(this, TelegramBotPolling);\n\n    this.bot = bot;\n    this.options = typeof bot.options.polling === 'boolean' ? {} : bot.options.polling;\n    this.options.interval = typeof this.options.interval === 'number' ? this.options.interval : 300;\n    this.options.params = _typeof(this.options.params) === 'object' ? this.options.params : {};\n    this.options.params.offset = typeof this.options.params.offset === 'number' ? this.options.params.offset : 0;\n    this.options.params.timeout = typeof this.options.params.timeout === 'number' ? this.options.params.timeout : 10;\n    if (typeof this.options.timeout === 'number') {\n      deprecate('`options.polling.timeout` is deprecated. Use `options.polling.params` instead.');\n      this.options.params.timeout = this.options.timeout;\n    }\n    this._lastUpdate = 0;\n    this._lastRequest = null;\n    this._abort = false;\n    this._pollingTimeout = null;\n  }\n\n  /**\n   * Start polling\n   * @param  {Object} [options]\n   * @param  {Object} [options.restart]\n   * @return {Promise}\n   */\n\n\n  _createClass(TelegramBotPolling, [{\n    key: 'start',\n    value: function start() {\n      var _this = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (this._lastRequest) {\n        if (!options.restart) {\n          return Promise.resolve();\n        }\n        return this.stop({\n          cancel: true,\n          reason: 'Polling restart'\n        }).then(function () {\n          return _this._polling();\n        });\n      }\n      return this._polling();\n    }\n\n    /**\n     * Stop polling\n     * @param  {Object} [options] Options\n     * @param  {Boolean} [options.cancel] Cancel current request\n     * @param  {String} [options.reason] Reason for stopping polling\n     * @return {Promise}\n     */\n\n  }, {\n    key: 'stop',\n    value: function stop() {\n      var _this2 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (!this._lastRequest) {\n        return Promise.resolve();\n      }\n      var lastRequest = this._lastRequest;\n      this._lastRequest = null;\n      clearTimeout(this._pollingTimeout);\n      if (options.cancel) {\n        var reason = options.reason || 'Polling stop';\n        lastRequest.cancel(reason);\n        return Promise.resolve();\n      }\n      this._abort = true;\n      return lastRequest.finally(function () {\n        _this2._abort = false;\n      });\n    }\n\n    /**\n     * Return `true` if is polling. Otherwise, `false`.\n     */\n\n  }, {\n    key: 'isPolling',\n    value: function isPolling() {\n      return !!this._lastRequest;\n    }\n\n    /**\n     * Handle error thrown during polling.\n     * @private\n     * @param  {Error} error\n     */\n\n  }, {\n    key: '_error',\n    value: function _error(error) {\n      if (!this.bot.listeners('polling_error').length) {\n        return console.error('error: [polling_error] %j', error); // eslint-disable-line no-console\n      }\n      return this.bot.emit('polling_error', error);\n    }\n\n    /**\n     * Invokes polling (with recursion!)\n     * @return {Promise} promise of the current request\n     * @private\n     */\n\n  }, {\n    key: '_polling',\n    value: function _polling() {\n      var _this3 = this;\n\n      this._lastRequest = this._getUpdates().then(function (updates) {\n        _this3._lastUpdate = Date.now();\n        debug('polling data %j', updates);\n        updates.forEach(function (update) {\n          _this3.options.params.offset = update.update_id + 1;\n          debug('updated offset: %s', _this3.options.params.offset);\n          try {\n            _this3.bot.processUpdate(update);\n          } catch (err) {\n            err._processing = true;\n            throw err;\n          }\n        });\n        return null;\n      }).catch(function (err) {\n        debug('polling error: %s', err.message);\n        if (!err._processing) {\n          return _this3._error(err);\n        }\n        delete err._processing;\n        /*\n         * An error occured while processing the items,\n         * i.e. in `this.bot.processUpdate()` above.\n         * We need to mark the already-processed items\n         * to avoid fetching them again once the application\n         * is restarted, or moves to next polling interval\n         * (in cases where unhandled rejections do not terminate\n         * the process).\n         * See https://github.com/yagop/node-telegram-bot-api/issues/36#issuecomment-268532067\n         */\n        if (!_this3.bot.options.badRejection) {\n          return _this3._error(err);\n        }\n        var opts = {\n          offset: _this3.options.params.offset,\n          limit: 1,\n          timeout: 0\n        };\n        return _this3.bot.getUpdates(opts).then(function () {\n          return _this3._error(err);\n        }).catch(function (requestErr) {\n          /*\n           * We have been unable to handle this error.\n           * We have to log this to stderr to ensure devops\n           * understands that they may receive already-processed items\n           * on app restart.\n           * We simply can not rescue this situation, emit \"error\"\n           * event, with the hope that the application exits.\n           */\n          /* eslint-disable no-console */\n          var bugUrl = 'https://github.com/yagop/node-telegram-bot-api/issues/36#issuecomment-268532067';\n          console.error('error: Internal handling of The Offset Infinite Loop failed');\n          console.error('error: Due to error \\'' + requestErr + '\\'');\n          console.error('error: You may receive already-processed updates on app restart');\n          console.error('error: Please see ' + bugUrl + ' for more information');\n          /* eslint-enable no-console */\n          return _this3.bot.emit('error', new errors.FatalError(err));\n        });\n      }).finally(function () {\n        if (_this3._abort) {\n          debug('Polling is aborted!');\n        } else {\n          debug('setTimeout for %s miliseconds', _this3.options.interval);\n          _this3._pollingTimeout = setTimeout(function () {\n            return _this3._polling();\n          }, _this3.options.interval);\n        }\n      });\n      return this._lastRequest;\n    }\n\n    /**\n     * Unset current webhook. Used when we detect that a webhook has been set\n     * and we are trying to poll. Polling and WebHook are mutually exclusive.\n     * @see https://core.telegram.org/bots/api#getting-updates\n     * @private\n     */\n\n  }, {\n    key: '_unsetWebHook',\n    value: function _unsetWebHook() {\n      debug('unsetting webhook');\n      return this.bot._request('setWebHook');\n    }\n\n    /**\n     * Retrieve updates\n     */\n\n  }, {\n    key: '_getUpdates',\n    value: function _getUpdates() {\n      var _this4 = this;\n\n      debug('polling with options: %j', this.options.params);\n      return this.bot.getUpdates(this.options.params).catch(function (err) {\n        if (err.response && err.response.statusCode === ANOTHER_WEB_HOOK_USED) {\n          return _this4._unsetWebHook().then(function () {\n            return _this4.bot.getUpdates(_this4.options.params);\n          });\n        }\n        throw err;\n      });\n    }\n  }]);\n\n  return TelegramBotPolling;\n}();\n\nmodule.exports = TelegramBotPolling;"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 537, "column": 0}, "map": {"version":3,"sources":["file:///C:/Project/Fiba/photobot/node_modules/node-telegram-bot-api/lib/telegram.js"],"sourcesContent":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// shims\nrequire('array.prototype.findindex').shim(); // for Node.js v0.x\n\nvar errors = require('./errors');\nvar TelegramBotWebHook = require('./telegramWebHook');\nvar TelegramBotPolling = require('./telegramPolling');\nvar debug = require('debug')('node-telegram-bot-api');\nvar EventEmitter = require('eventemitter3');\nvar fileType = require('file-type');\nvar request = require('@cypress/request-promise');\nvar streamedRequest = require('@cypress/request');\nvar qs = require('querystring');\nvar stream = require('stream');\nvar mime = require('mime');\nvar path = require('path');\nvar URL = require('url');\nvar fs = require('fs');\nvar pump = require('pump');\nvar deprecate = require('./utils').deprecate;\n\nvar _messageTypes = ['text', 'animation', 'audio', 'channel_chat_created', 'contact', 'delete_chat_photo', 'dice', 'document', 'game', 'group_chat_created', 'invoice', 'left_chat_member', 'location', 'migrate_from_chat_id', 'migrate_to_chat_id', 'new_chat_members', 'new_chat_photo', 'new_chat_title', 'passport_data', 'photo', 'pinned_message', 'poll', 'sticker', 'successful_payment', 'supergroup_chat_created', 'video', 'video_note', 'voice', 'video_chat_started', 'video_chat_ended', 'video_chat_participants_invited', 'video_chat_scheduled', 'message_auto_delete_timer_changed', 'chat_invite_link', 'chat_member_updated', 'web_app_data'];\nvar _deprecatedMessageTypes = ['new_chat_participant', 'left_chat_participant'];\n\n/**\n * JSON-serialize data. If the provided data is already a String,\n * return it as is.\n * @private\n * @param  {*} data\n * @return {String}\n */\nfunction stringify(data) {\n  if (typeof data === 'string') {\n    return data;\n  }\n  return JSON.stringify(data);\n}\n\nvar TelegramBot = function (_EventEmitter) {\n  _inherits(TelegramBot, _EventEmitter);\n\n  _createClass(TelegramBot, [{\n    key: 'on',\n\n\n    /**\n     * Add listener for the specified [event](https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#events).\n     * This is the usual `emitter.on()` method.\n     * @param  {String} event\n     * @param  {Function} listener\n     * @see {@link https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#events|Available events}\n     * @see https://nodejs.org/api/events.html#events_emitter_on_eventname_listener\n     */\n    value: function on(event, listener) {\n      if (_deprecatedMessageTypes.indexOf(event) !== -1) {\n        var url = 'https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#events';\n        deprecate('Events ' + _deprecatedMessageTypes.join(',') + ' are deprecated. See the updated list of events: ' + url);\n      }\n      _get(TelegramBot.prototype.__proto__ || Object.getPrototypeOf(TelegramBot.prototype), 'on', this).call(this, event, listener);\n    }\n\n    /**\n     * Both request method to obtain messages are implemented. To use standard polling, set `polling: true`\n     * on `options`. Notice that [webHook](https://core.telegram.org/bots/api#setwebhook) will need a SSL certificate.\n     * Emits `message` when a message arrives.\n     *\n     * @class TelegramBot\n     * @constructor\n     * @param {String} token Bot Token\n     * @param {Object} [options]\n     * @param {Boolean|Object} [options.polling=false] Set true to enable polling or set options.\n     *  If a WebHook has been set, it will be deleted automatically.\n     * @param {String|Number} [options.polling.timeout=10] *Deprecated. Use `options.polling.params` instead*.\n     *  Timeout in seconds for long polling.\n     * @param {Boolean} [options.testEnvironment=false] Set true to  work with test enviroment.\n     * When working with the test environment, you may use HTTP links without TLS to test your Web App.\n     * @param {String|Number} [options.polling.interval=300] Interval between requests in miliseconds\n     * @param {Boolean} [options.polling.autoStart=true] Start polling immediately\n     * @param {Object} [options.polling.params] Parameters to be used in polling API requests.\n     *  See https://core.telegram.org/bots/api#getupdates for more information.\n     * @param  {Number} [options.polling.params.timeout=10] Timeout in seconds for long polling.\n     * @param {Boolean|Object} [options.webHook=false] Set true to enable WebHook or set options\n     * @param {String} [options.webHook.host=\"0.0.0.0\"] Host to bind to\n     * @param {Number} [options.webHook.port=8443] Port to bind to\n     * @param {String} [options.webHook.key] Path to file with PEM private key for webHook server.\n     *  The file is read **synchronously**!\n     * @param {String} [options.webHook.cert] Path to file with PEM certificate (public) for webHook server.\n     *  The file is read **synchronously**!\n     * @param {String} [options.webHook.pfx] Path to file with PFX private key and certificate chain for webHook server.\n     *  The file is read **synchronously**!\n     * @param {Boolean} [options.webHook.autoOpen=true] Open webHook immediately\n     * @param {Object} [options.webHook.https] Options to be passed to `https.createServer()`.\n     *  Note that `options.webHook.key`, `options.webHook.cert` and `options.webHook.pfx`, if provided, will be\n     *  used to override `key`, `cert` and `pfx` in this object, respectively.\n     *  See https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener for more information.\n     * @param {String} [options.webHook.healthEndpoint=\"/healthz\"] An endpoint for health checks that always responds with 200 OK\n     * @param {Boolean} [options.onlyFirstMatch=false] Set to true to stop after first match. Otherwise, all regexps are executed\n     * @param {Object} [options.request] Options which will be added for all requests to telegram api.\n     *  See https://github.com/request/request#requestoptions-callback for more information.\n     * @param {String} [options.baseApiUrl=\"https://api.telegram.org\"] API Base URl; useful for proxying and testing\n     * @param {Boolean} [options.filepath=true] Allow passing file-paths as arguments when sending files,\n     *  such as photos using `TelegramBot#sendPhoto()`. See [usage information][usage-sending-files-performance]\n     *  for more information on this option and its consequences.\n     * @param {Boolean} [options.badRejection=false] Set to `true`\n     *  **if and only if** the Node.js version you're using terminates the\n     *  process on unhandled rejections. This option is only for\n     *  *forward-compatibility purposes*.\n     * @see https://core.telegram.org/bots/api\n     */\n\n  }], [{\n    key: 'errors',\n\n    /**\n     * The different errors the library uses.\n     * @type {Object}\n     */\n    get: function get() {\n      return errors;\n    }\n\n    /**\n     * The types of message updates the library handles.\n     * @type {String[]}\n     */\n\n  }, {\n    key: 'messageTypes',\n    get: function get() {\n      return _messageTypes;\n    }\n  }]);\n\n  function TelegramBot(token) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, TelegramBot);\n\n    var _this = _possibleConstructorReturn(this, (TelegramBot.__proto__ || Object.getPrototypeOf(TelegramBot)).call(this));\n\n    _this.token = token;\n    _this.options = options;\n    _this.options.polling = typeof options.polling === 'undefined' ? false : options.polling;\n    _this.options.webHook = typeof options.webHook === 'undefined' ? false : options.webHook;\n    _this.options.baseApiUrl = options.baseApiUrl || 'https://api.telegram.org';\n    _this.options.filepath = typeof options.filepath === 'undefined' ? true : options.filepath;\n    _this.options.badRejection = typeof options.badRejection === 'undefined' ? false : options.badRejection;\n    _this._textRegexpCallbacks = [];\n    _this._replyListenerId = 0;\n    _this._replyListeners = [];\n    _this._polling = null;\n    _this._webHook = null;\n\n    if (options.polling) {\n      var autoStart = options.polling.autoStart;\n      if (typeof autoStart === 'undefined' || autoStart === true) {\n        _this.startPolling();\n      }\n    }\n\n    if (options.webHook) {\n      var autoOpen = options.webHook.autoOpen;\n      if (typeof autoOpen === 'undefined' || autoOpen === true) {\n        _this.openWebHook();\n      }\n    }\n    return _this;\n  }\n\n  /**\n   * Generates url with bot token and provided path/method you want to be got/executed by bot\n   * @param  {String} path\n   * @return {String} url\n   * @private\n   * @see https://core.telegram.org/bots/api#making-requests\n   */\n\n\n  _createClass(TelegramBot, [{\n    key: '_buildURL',\n    value: function _buildURL(_path) {\n      return this.options.baseApiUrl + '/bot' + this.token + (this.options.testEnvironment ? '/test' : '') + '/' + _path;\n    }\n\n    /**\n     * Fix 'reply_markup' parameter by making it JSON-serialized, as\n     * required by the Telegram Bot API\n     * @param {Object} obj Object; either 'form' or 'qs'\n     * @private\n     * @see https://core.telegram.org/bots/api#sendmessage\n     */\n\n  }, {\n    key: '_fixReplyMarkup',\n    value: function _fixReplyMarkup(obj) {\n      var replyMarkup = obj.reply_markup;\n      if (replyMarkup && typeof replyMarkup !== 'string') {\n        obj.reply_markup = stringify(replyMarkup);\n      }\n    }\n\n    /**\n     * Fix 'entities' or 'caption_entities' or 'explanation_entities' parameter by making it JSON-serialized, as\n     * required by the Telegram Bot API\n     * @param {Object} obj Object;\n     * @private\n     * @see https://core.telegram.org/bots/api#sendmessage\n     * @see https://core.telegram.org/bots/api#copymessage\n     * @see https://core.telegram.org/bots/api#sendpoll\n     */\n\n  }, {\n    key: '_fixEntitiesField',\n    value: function _fixEntitiesField(obj) {\n      var entities = obj.entities;\n      var captionEntities = obj.caption_entities;\n      var explanationEntities = obj.explanation_entities;\n      if (entities && typeof entities !== 'string') {\n        obj.entities = stringify(entities);\n      }\n\n      if (captionEntities && typeof captionEntities !== 'string') {\n        obj.caption_entities = stringify(captionEntities);\n      }\n\n      if (explanationEntities && typeof explanationEntities !== 'string') {\n        obj.explanation_entities = stringify(explanationEntities);\n      }\n    }\n  }, {\n    key: '_fixAddFileThumbnail',\n    value: function _fixAddFileThumbnail(options, opts) {\n      if (options.thumb) {\n        if (opts.formData === null) {\n          opts.formData = {};\n        }\n\n        var attachName = 'photo';\n\n        var _formatSendData2 = this._formatSendData(attachName, options.thumb.replace('attach://', '')),\n            _formatSendData3 = _slicedToArray(_formatSendData2, 1),\n            formData = _formatSendData3[0];\n\n        if (formData) {\n          opts.formData[attachName] = formData[attachName];\n          opts.qs.thumbnail = 'attach://' + attachName;\n        }\n      }\n    }\n\n    /**\n     * Make request against the API\n     * @param  {String} _path API endpoint\n     * @param  {Object} [options]\n     * @private\n     * @return {Promise}\n     */\n\n  }, {\n    key: '_request',\n    value: function _request(_path) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (!this.token) {\n        return Promise.reject(new errors.FatalError('Telegram Bot Token not provided!'));\n      }\n\n      if (this.options.request) {\n        Object.assign(options, this.options.request);\n      }\n\n      if (options.form) {\n        this._fixReplyMarkup(options.form);\n        this._fixEntitiesField(options.form);\n      }\n      if (options.qs) {\n        this._fixReplyMarkup(options.qs);\n      }\n\n      options.method = 'POST';\n      options.url = this._buildURL(_path);\n      options.simple = false;\n      options.resolveWithFullResponse = true;\n      options.forever = true;\n      debug('HTTP request: %j', options);\n      return request(options).then(function (resp) {\n        var data = void 0;\n        try {\n          data = resp.body = JSON.parse(resp.body);\n        } catch (err) {\n          throw new errors.ParseError('Error parsing response: ' + resp.body, resp);\n        }\n\n        if (data.ok) {\n          return data.result;\n        }\n\n        throw new errors.TelegramError(data.error_code + ' ' + data.description, resp);\n      }).catch(function (error) {\n        // TODO: why can't we do `error instanceof errors.BaseError`?\n        if (error.response) throw error;\n        throw new errors.FatalError(error);\n      });\n    }\n\n    /**\n     * Format data to be uploaded; handles file paths, streams and buffers\n     * @param  {String} type\n     * @param  {String|stream.Stream|Buffer} data\n     * @param  {Object} fileOptions File options\n     * @param  {String} [fileOptions.filename] File name\n     * @param  {String} [fileOptions.contentType] Content type (i.e. MIME)\n     * @return {Array} formatted\n     * @return {Object} formatted[0] formData\n     * @return {String} formatted[1] fileId\n     * @throws Error if Buffer file type is not supported.\n     * @see https://npmjs.com/package/file-type\n     * @private\n     */\n\n  }, {\n    key: '_formatSendData',\n    value: function _formatSendData(type, data) {\n      var fileOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var deprecationMessage = 'See https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files' + ' for more information on how sending files has been improved and' + ' on how to disable this deprecation message altogether.';\n      var filedata = data;\n      var filename = fileOptions.filename;\n      var contentType = fileOptions.contentType;\n\n      if (data instanceof stream.Stream) {\n        if (!filename && data.path) {\n          // Will be 'null' if could not be parsed.\n          // For example, 'data.path' === '/?id=123' from 'request(\"https://example.com/?id=123\")'\n          var url = URL.parse(path.basename(data.path.toString()));\n          if (url.pathname) {\n            filename = qs.unescape(url.pathname);\n          }\n        }\n      } else if (Buffer.isBuffer(data)) {\n        if (!filename && !process.env.NTBA_FIX_350) {\n          deprecate('Buffers will have their filenames default to \"filename\" instead of \"data\". ' + deprecationMessage);\n          filename = 'data';\n        }\n        if (!contentType) {\n          var filetype = fileType(data);\n          if (filetype) {\n            contentType = filetype.mime;\n            var ext = filetype.ext;\n            if (ext && !process.env.NTBA_FIX_350) {\n              filename = filename + '.' + ext;\n            }\n          } else if (!process.env.NTBA_FIX_350) {\n            deprecate('An error will no longer be thrown if file-type of buffer could not be detected. ' + deprecationMessage);\n            throw new errors.FatalError('Unsupported Buffer file-type');\n          }\n        }\n      } else if (data) {\n        if (this.options.filepath && fs.existsSync(data)) {\n          filedata = fs.createReadStream(data);\n          if (!filename) {\n            filename = path.basename(data);\n          }\n        } else {\n          return [null, data];\n        }\n      } else {\n        return [null, data];\n      }\n\n      filename = filename || 'filename';\n      contentType = contentType || mime.lookup(filename);\n      if (process.env.NTBA_FIX_350) {\n        contentType = contentType || 'application/octet-stream';\n      } else {\n        deprecate('In the future, content-type of files you send will default to \"application/octet-stream\". ' + deprecationMessage);\n      }\n\n      // TODO: Add missing file extension.\n\n      return [_defineProperty({}, type, {\n        value: filedata,\n        options: {\n          filename: filename,\n          contentType: contentType\n        }\n      }), null];\n    }\n\n    /**\n     * Start polling.\n     * Rejects returned promise if a WebHook is being used by this instance.\n     * @param  {Object} [options]\n     * @param  {Boolean} [options.restart=true] Consecutive calls to this method causes polling to be restarted\n     * @return {Promise}\n     */\n\n  }, {\n    key: 'startPolling',\n    value: function startPolling() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (this.hasOpenWebHook()) {\n        return Promise.reject(new errors.FatalError('Polling and WebHook are mutually exclusive'));\n      }\n      options.restart = typeof options.restart === 'undefined' ? true : options.restart;\n      if (!this._polling) {\n        this._polling = new TelegramBotPolling(this);\n      }\n      return this._polling.start(options);\n    }\n\n    /**\n     * Alias of `TelegramBot#startPolling()`. This is **deprecated**.\n     * @param  {Object} [options]\n     * @return {Promise}\n     * @deprecated\n     */\n\n  }, {\n    key: 'initPolling',\n    value: function initPolling() {\n      deprecate('TelegramBot#initPolling() is deprecated. Use TelegramBot#startPolling() instead.');\n      return this.startPolling();\n    }\n\n    /**\n     * Stops polling after the last polling request resolves.\n     * Multiple invocations do nothing if polling is already stopped.\n     * Returning the promise of the last polling request is **deprecated**.\n     * @param  {Object} [options] Options\n     * @param  {Boolean} [options.cancel] Cancel current request\n     * @param  {String} [options.reason] Reason for stopping polling\n     * @return {Promise}\n     */\n\n  }, {\n    key: 'stopPolling',\n    value: function stopPolling(options) {\n      if (!this._polling) {\n        return Promise.resolve();\n      }\n      return this._polling.stop(options);\n    }\n\n    /**\n     * Get link for file.\n     * Use this method to get link for file for subsequent use.\n     * Attention: link will be valid for 1 hour.\n     *\n     * This method is a sugar extension of the (getFile)[#getfilefileid] method,\n     * which returns just path to file on remote server (you will have to manually build full uri after that).\n     *\n     * @param  {String} fileId  File identifier to get info about\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Promise which will have  *fileURI* in resolve callback\n     * @see https://core.telegram.org/bots/api#getfile\n     */\n\n  }, {\n    key: 'getFileLink',\n    value: function getFileLink(fileId) {\n      var _this2 = this;\n\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      return this.getFile(fileId, form).then(function (resp) {\n        return _this2.options.baseApiUrl + '/file/bot' + _this2.token + '/' + resp.file_path;\n      });\n    }\n\n    /**\n     * Return a readable stream for file.\n     *\n     * `fileStream.path` is the specified file ID i.e. `fileId`.\n     * `fileStream` emits event `info` passing a single argument i.e.\n     * `info` with the interface `{ uri }` where `uri` is the URI of the\n     * file on Telegram servers.\n     *\n     * This method is a sugar extension of the [getFileLink](#TelegramBot+getFileLink) method,\n     * which returns the full URI to the file on remote server.\n     *\n     * @param  {String} fileId File identifier to get info about\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {stream.Readable} fileStream\n     */\n\n  }, {\n    key: 'getFileStream',\n    value: function getFileStream(fileId) {\n      var _this3 = this;\n\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var fileStream = new stream.PassThrough();\n      fileStream.path = fileId;\n      this.getFileLink(fileId, form).then(function (fileURI) {\n        fileStream.emit('info', {\n          uri: fileURI\n        });\n        pump(streamedRequest(Object.assign({ uri: fileURI }, _this3.options.request)), fileStream);\n      }).catch(function (error) {\n        fileStream.emit('error', error);\n      });\n      return fileStream;\n    }\n\n    /**\n     * Downloads file in the specified folder.\n     *\n     * This method is a sugar extension of the [getFileStream](#TelegramBot+getFileStream) method,\n     * which returns a readable file stream.\n     *\n     * @param  {String} fileId  File identifier to get info about\n     * @param  {String} downloadDir Absolute path to the folder in which file will be saved\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Promise, which will have *filePath* of downloaded file in resolve callback\n     */\n\n  }, {\n    key: 'downloadFile',\n    value: function downloadFile(fileId, downloadDir) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var resolve = void 0;\n      var reject = void 0;\n      var promise = new Promise(function (a, b) {\n        resolve = a;\n        reject = b;\n      });\n      var fileStream = this.getFileStream(fileId, form);\n      fileStream.on('info', function (info) {\n        var fileName = info.uri.slice(info.uri.lastIndexOf('/') + 1);\n        // TODO: Ensure fileName doesn't contains slashes\n        var filePath = path.join(downloadDir, fileName);\n        pump(fileStream, fs.createWriteStream(filePath), function (error) {\n          if (error) {\n            return reject(error);\n          }\n          return resolve(filePath);\n        });\n      });\n      fileStream.on('error', function (err) {\n        reject(err);\n      });\n      return promise;\n    }\n\n    /**\n     * Register a RegExp to test against an incomming text message.\n     * @param  {RegExp}   regexpRexecuted with `exec`.\n     * @param  {Function} callback     Callback will be called with 2 parameters,\n     * the `msg` and the result of executing `regexp.exec` on message text.\n     */\n\n  }, {\n    key: 'onText',\n    value: function onText(regexp, callback) {\n      this._textRegexpCallbacks.push({ regexp: regexp, callback: callback });\n    }\n\n    /**\n     * Remove a listener registered with `onText()`.\n     * @param  {RegExp} regexp RegExp used previously in `onText()`\n     * @return {Object} deletedListener The removed reply listener if\n     *   found. This object has `regexp` and `callback`\n     *   properties. If not found, returns `null`.\n     */\n\n  }, {\n    key: 'removeTextListener',\n    value: function removeTextListener(regexp) {\n      var index = this._textRegexpCallbacks.findIndex(function (textListener) {\n        return String(textListener.regexp) === String(regexp);\n      });\n      if (index === -1) {\n        return null;\n      }\n      return this._textRegexpCallbacks.splice(index, 1)[0];\n    }\n\n    /**\n     * Remove all listeners registered with `onText()`.\n     */\n\n  }, {\n    key: 'clearTextListeners',\n    value: function clearTextListeners() {\n      this._textRegexpCallbacks = [];\n    }\n\n    /**\n     * Register a reply to wait for a message response.\n     *\n     * @param  {Number|String} chatId The chat id where the message cames from.\n     * @param  {Number|String} messageId The message id to be replied.\n     * @param  {Function} callback Callback will be called with the reply\n     *  message.\n     * @return {Number} id The ID of the inserted reply listener.\n     */\n\n  }, {\n    key: 'onReplyToMessage',\n    value: function onReplyToMessage(chatId, messageId, callback) {\n      var id = ++this._replyListenerId;\n      this._replyListeners.push({\n        id: id,\n        chatId: chatId,\n        messageId: messageId,\n        callback: callback\n      });\n      return id;\n    }\n\n    /**\n     * Removes a reply that has been prev. registered for a message response.\n     * @param   {Number} replyListenerId The ID of the reply listener.\n     * @return  {Object} deletedListener The removed reply listener if\n     *   found. This object has `id`, `chatId`, `messageId` and `callback`\n     *   properties. If not found, returns `null`.\n     */\n\n  }, {\n    key: 'removeReplyListener',\n    value: function removeReplyListener(replyListenerId) {\n      var index = this._replyListeners.findIndex(function (replyListener) {\n        return replyListener.id === replyListenerId;\n      });\n      if (index === -1) {\n        return null;\n      }\n      return this._replyListeners.splice(index, 1)[0];\n    }\n\n    /**\n     * Removes all replies that have been prev. registered for a message response.\n     *\n     * @return  {Array} deletedListeners An array of removed listeners.\n     */\n\n  }, {\n    key: 'clearReplyListeners',\n    value: function clearReplyListeners() {\n      this._replyListeners = [];\n    }\n\n    /**\n     * Return true if polling. Otherwise, false.\n     *\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'isPolling',\n    value: function isPolling() {\n      return this._polling ? this._polling.isPolling() : false;\n    }\n\n    /**\n     * Open webhook.\n     * Multiple invocations do nothing if webhook is already open.\n     * Rejects returned promise if Polling is being used by this instance.\n     *\n     * @return {Promise}\n     */\n\n  }, {\n    key: 'openWebHook',\n    value: function openWebHook() {\n      if (this.isPolling()) {\n        return Promise.reject(new errors.FatalError('WebHook and Polling are mutually exclusive'));\n      }\n      if (!this._webHook) {\n        this._webHook = new TelegramBotWebHook(this);\n      }\n      return this._webHook.open();\n    }\n\n    /**\n     * Close webhook after closing all current connections.\n     * Multiple invocations do nothing if webhook is already closed.\n     *\n     * @return {Promise} Promise\n     */\n\n  }, {\n    key: 'closeWebHook',\n    value: function closeWebHook() {\n      if (!this._webHook) {\n        return Promise.resolve();\n      }\n      return this._webHook.close();\n    }\n\n    /**\n     * Return true if using webhook and it is open i.e. accepts connections.\n     * Otherwise, false.\n     *\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'hasOpenWebHook',\n    value: function hasOpenWebHook() {\n      return this._webHook ? this._webHook.isOpen() : false;\n    }\n\n    /**\n     * Process an update; emitting the proper events and executing regexp\n     * callbacks. This method is useful should you be using a different\n     * way to fetch updates, other than those provided by TelegramBot.\n     *\n     * @param  {Object} update\n     * @see https://core.telegram.org/bots/api#update\n     */\n\n  }, {\n    key: 'processUpdate',\n    value: function processUpdate(update) {\n      var _this4 = this;\n\n      debug('Process Update %j', update);\n      var message = update.message;\n      var editedMessage = update.edited_message;\n      var channelPost = update.channel_post;\n      var editedChannelPost = update.edited_channel_post;\n      var inlineQuery = update.inline_query;\n      var chosenInlineResult = update.chosen_inline_result;\n      var callbackQuery = update.callback_query;\n      var shippingQuery = update.shipping_query;\n      var preCheckoutQuery = update.pre_checkout_query;\n      var poll = update.poll;\n      var pollAnswer = update.poll_answer;\n      var chatMember = update.chat_member;\n      var myChatMember = update.my_chat_member;\n      var chatJoinRequest = update.chat_join_request;\n\n      if (message) {\n        debug('Process Update message %j', message);\n        var metadata = {};\n        metadata.type = TelegramBot.messageTypes.find(function (messageType) {\n          return message[messageType];\n        });\n        this.emit('message', message, metadata);\n        if (metadata.type) {\n          debug('Emitting %s: %j', metadata.type, message);\n          this.emit(metadata.type, message, metadata);\n        }\n        if (message.text) {\n          debug('Text message');\n          this._textRegexpCallbacks.some(function (reg) {\n            debug('Matching %s with %s', message.text, reg.regexp);\n            var result = reg.regexp.exec(message.text);\n            if (!result) {\n              return false;\n            }\n            // reset index so we start at the beginning of the regex each time\n            reg.regexp.lastIndex = 0;\n            debug('Matches %s', reg.regexp);\n            reg.callback(message, result);\n            // returning truthy value exits .some\n            return _this4.options.onlyFirstMatch;\n          });\n        }\n        if (message.reply_to_message) {\n          // Only callbacks waiting for this message\n          this._replyListeners.forEach(function (reply) {\n            // Message from the same chat\n            if (reply.chatId === message.chat.id) {\n              // Responding to that message\n              if (reply.messageId === message.reply_to_message.message_id) {\n                // Resolve the promise\n                reply.callback(message);\n              }\n            }\n          });\n        }\n      } else if (editedMessage) {\n        debug('Process Update edited_message %j', editedMessage);\n        this.emit('edited_message', editedMessage);\n        if (editedMessage.text) {\n          this.emit('edited_message_text', editedMessage);\n        }\n        if (editedMessage.caption) {\n          this.emit('edited_message_caption', editedMessage);\n        }\n      } else if (channelPost) {\n        debug('Process Update channel_post %j', channelPost);\n        this.emit('channel_post', channelPost);\n      } else if (editedChannelPost) {\n        debug('Process Update edited_channel_post %j', editedChannelPost);\n        this.emit('edited_channel_post', editedChannelPost);\n        if (editedChannelPost.text) {\n          this.emit('edited_channel_post_text', editedChannelPost);\n        }\n        if (editedChannelPost.caption) {\n          this.emit('edited_channel_post_caption', editedChannelPost);\n        }\n      } else if (inlineQuery) {\n        debug('Process Update inline_query %j', inlineQuery);\n        this.emit('inline_query', inlineQuery);\n      } else if (chosenInlineResult) {\n        debug('Process Update chosen_inline_result %j', chosenInlineResult);\n        this.emit('chosen_inline_result', chosenInlineResult);\n      } else if (callbackQuery) {\n        debug('Process Update callback_query %j', callbackQuery);\n        this.emit('callback_query', callbackQuery);\n      } else if (shippingQuery) {\n        debug('Process Update shipping_query %j', shippingQuery);\n        this.emit('shipping_query', shippingQuery);\n      } else if (preCheckoutQuery) {\n        debug('Process Update pre_checkout_query %j', preCheckoutQuery);\n        this.emit('pre_checkout_query', preCheckoutQuery);\n      } else if (poll) {\n        debug('Process Update poll %j', poll);\n        this.emit('poll', poll);\n      } else if (pollAnswer) {\n        debug('Process Update poll_answer %j', pollAnswer);\n        this.emit('poll_answer', pollAnswer);\n      } else if (chatMember) {\n        debug('Process Update chat_member %j', chatMember);\n        this.emit('chat_member', chatMember);\n      } else if (myChatMember) {\n        debug('Process Update my_chat_member %j', myChatMember);\n        this.emit('my_chat_member', myChatMember);\n      } else if (chatJoinRequest) {\n        debug('Process Update my_chat_member %j', chatJoinRequest);\n        this.emit('chat_join_request', chatJoinRequest);\n      }\n    }\n\n    /** Start Telegram Bot API methods */\n\n    /**\n    * Use this method to receive incoming updates using long polling.\n    * This method has an [older, compatible signature][getUpdates-v0.25.0]\n    * that is being deprecated.\n    *\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise}\n    * @see https://core.telegram.org/bots/api#getupdates\n    */\n\n  }, {\n    key: 'getUpdates',\n    value: function getUpdates() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /* The older method signature was getUpdates(timeout, limit, offset).\n       * We need to ensure backwards-compatibility while maintaining\n       * consistency of the method signatures throughout the library */\n      if ((typeof form === 'undefined' ? 'undefined' : _typeof(form)) !== 'object') {\n        /* eslint-disable no-param-reassign, prefer-rest-params */\n        deprecate('The method signature getUpdates(timeout, limit, offset) has been deprecated since v0.25.0');\n        form = {\n          timeout: arguments[0],\n          limit: arguments[1],\n          offset: arguments[2]\n        };\n        /* eslint-enable no-param-reassign, prefer-rest-params */\n      }\n\n      return this._request('getUpdates', { form: form });\n    }\n\n    /**\n     * Specify an url to receive incoming updates via an outgoing webHook.\n     * This method has an [older, compatible signature][setWebHook-v0.25.0]\n     * that is being deprecated.\n     *\n     * @param  {String} url URL where Telegram will make HTTP Post. Leave empty to\n     * delete webHook.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {String|stream.Stream} [options.certificate] PEM certificate key (public).\n     * @param  {String} [options.secret_token] Optional secret token to be sent in a header `X-Telegram-Bot-Api-Secret-Token` in every webhook request.\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#setwebhook\n     * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n     */\n\n  }, {\n    key: 'setWebHook',\n    value: function setWebHook(url) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var fileOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      /* The older method signature was setWebHook(url, cert).\n       * We need to ensure backwards-compatibility while maintaining\n       * consistency of the method signatures throughout the library */\n      var cert = void 0;\n      // Note: 'options' could be an object, if a stream was provided (in place of 'cert')\n      if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) !== 'object' || options instanceof stream.Stream) {\n        deprecate('The method signature setWebHook(url, cert) has been deprecated since v0.25.0');\n        cert = options;\n        options = {}; // eslint-disable-line no-param-reassign\n      } else {\n        cert = options.certificate;\n      }\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.url = url;\n\n      if (cert) {\n        try {\n          var sendData = this._formatSendData('certificate', cert, fileOptions);\n          opts.formData = sendData[0];\n          opts.qs.certificate = sendData[1];\n        } catch (ex) {\n          return Promise.reject(ex);\n        }\n      }\n\n      return this._request('setWebHook', opts);\n    }\n\n    /**\n     * Use this method to remove webhook integration if you decide to\n     * switch back to getUpdates. Returns True on success.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#deletewebhook\n     */\n\n  }, {\n    key: 'deleteWebHook',\n    value: function deleteWebHook() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('deleteWebhook', { form: form });\n    }\n\n    /**\n     * Use this method to get current webhook status.\n     * On success, returns a [WebhookInfo](https://core.telegram.org/bots/api#webhookinfo) object.\n     * If the bot is using getUpdates, will return an object with the\n     * url field empty.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#getwebhookinfo\n     */\n\n  }, {\n    key: 'getWebHookInfo',\n    value: function getWebHookInfo() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('getWebhookInfo', { form: form });\n    }\n\n    /**\n     * A simple method for testing your bot's authentication token. Requires no parameters.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} basic information about the bot in form of a [User](https://core.telegram.org/bots/api#user) object.\n     * @see https://core.telegram.org/bots/api#getme\n     */\n\n  }, {\n    key: 'getMe',\n    value: function getMe() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('getMe', { form: form });\n    }\n\n    /**\n     * This method log out your bot from the cloud Bot API server before launching the bot locally.\n     * You must log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates.\n     * After a successful call, you will not be able to log in again using the same token for 10 minutes.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}  True on success\n     * @see https://core.telegram.org/bots/api#logout\n     */\n\n  }, {\n    key: 'logOut',\n    value: function logOut() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('logOut', { form: form });\n    }\n\n    /**\n     * This method close the bot instance before moving it from one local server to another.\n     * This method will return error 429 in the first 10 minutes after the bot is launched.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}  True on success\n     * @see https://core.telegram.org/bots/api#close\n     */\n\n  }, {\n    key: 'close',\n    value: function close() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('close', { form: form });\n    }\n\n    /**\n     * Send text message.\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} text Text of the message to be sent\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#sendmessage\n     */\n\n  }, {\n    key: 'sendMessage',\n    value: function sendMessage(chatId, text) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.text = text;\n      return this._request('sendMessage', { form: form });\n    }\n\n    /**\n     * Forward messages of any kind.\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * or username of the target channel (in the format `@channelusername`)\n     * @param  {Number|String} fromChatId Unique identifier for the chat where the\n     * original message was sent (or channel username in the format `@channelusername`)\n     * @param  {Number|String} messageId  Unique message identifier in the chat specified in fromChatId\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#forwardmessage\n     */\n\n  }, {\n    key: 'forwardMessage',\n    value: function forwardMessage(chatId, fromChatId, messageId) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      form.chat_id = chatId;\n      form.from_chat_id = fromChatId;\n      form.message_id = messageId;\n      return this._request('forwardMessage', { form: form });\n    }\n\n    /**\n     * Copy messages of any kind. **Service messages and invoice messages can't be copied.**\n     * The method is analogous to the method forwardMessages, but the copied message doesn't\n     * have a link to the original message.\n     * Returns the MessageId of the sent message on success.\n     * @param  {Number|String} chatId     Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Number|String} fromChatId Unique identifier for the chat where the\n     * original message was sent\n     * @param  {Number|String} messageId  Unique message identifier\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} The [MessageId](https://core.telegram.org/bots/api#messageid) of the sent message on success\n     * @see https://core.telegram.org/bots/api#copymessage\n     */\n\n  }, {\n    key: 'copyMessage',\n    value: function copyMessage(chatId, fromChatId, messageId) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      form.chat_id = chatId;\n      form.from_chat_id = fromChatId;\n      form.message_id = messageId;\n      return this._request('copyMessage', { form: form });\n    }\n\n    /**\n     * Send photo\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String|stream.Stream|Buffer} photo A file path or a Stream. Can\n     * also be a `file_id` previously uploaded\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#sendphoto\n     * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n     */\n\n  }, {\n    key: 'sendPhoto',\n    value: function sendPhoto(chatId, photo) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('photo', photo, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.photo = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendPhoto', opts);\n    }\n\n    /**\n    * Send audio\n    *\n    * **Your audio must be in the .MP3 or .M4A format.**\n    *\n    * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n    * @param  {String|stream.Stream|Buffer} audio A file path, Stream or Buffer.\n    * Can also be a `file_id` previously uploaded.\n    * @param  {Object} [options] Additional Telegram query options\n    * @param  {Object} [fileOptions] Optional file related meta-data\n    * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n    * @see https://core.telegram.org/bots/api#sendaudio\n    * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n    */\n\n  }, {\n    key: 'sendAudio',\n    value: function sendAudio(chatId, audio) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      var opts = {\n        qs: options\n      };\n\n      opts.qs.chat_id = chatId;\n\n      try {\n        var sendData = this._formatSendData('audio', audio, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.audio = sendData[1];\n        this._fixAddFileThumbnail(options, opts);\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n\n      return this._request('sendAudio', opts);\n    }\n\n    /**\n    * Send Document\n    * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n    * @param  {String|stream.Stream|Buffer} doc A file path, Stream or Buffer.\n    * Can also be a `file_id` previously uploaded.\n    * @param  {Object} [options] Additional Telegram query options\n    * @param  {Object} [fileOptions] Optional file related meta-data\n    * @return {Promise}  On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n    * @see https://core.telegram.org/bots/api#sendDocument\n    * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n    */\n\n  }, {\n    key: 'sendDocument',\n    value: function sendDocument(chatId, doc) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('document', doc, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.document = sendData[1];\n        this._fixAddFileThumbnail(options, opts);\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n\n      return this._request('sendDocument', opts);\n    }\n\n    /**\n     * Use this method to send video files, **Telegram clients support mp4 videos** (other formats may be sent as Document).\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String|stream.Stream|Buffer} video A file path or Stream.\n     * Can also be a `file_id` previously uploaded.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#sendvideo\n     * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n     */\n\n  }, {\n    key: 'sendVideo',\n    value: function sendVideo(chatId, video) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('video', video, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.video = sendData[1];\n        this._fixAddFileThumbnail(options, opts);\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendVideo', opts);\n    }\n\n    /**\n     * Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound).\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String|stream.Stream|Buffer} animation A file path, Stream or Buffer.\n     * Can also be a `file_id` previously uploaded.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#sendanimation\n     * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n     */\n\n  }, {\n    key: 'sendAnimation',\n    value: function sendAnimation(chatId, animation) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('animation', animation, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.animation = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendAnimation', opts);\n    }\n\n    /**\n     * Send voice\n     *\n     * **Your audio must be in an .OGG file encoded with OPUS** (other formats may be sent as Audio or Document)\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String|stream.Stream|Buffer} voice A file path, Stream or Buffer.\n     * Can also be a `file_id` previously uploaded.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#sendvoice\n     * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n     */\n\n  }, {\n    key: 'sendVoice',\n    value: function sendVoice(chatId, voice) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('voice', voice, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.voice = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendVoice', opts);\n    }\n\n    /**\n     * Use this method to send video messages\n     * Telegram clients support **rounded square MPEG4 videos** of up to 1 minute long.\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String|stream.Stream|Buffer} videoNote A file path or Stream.\n     * Can also be a `file_id` previously uploaded.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @info The length parameter is actually optional. However, the API (at time of writing) requires you to always provide it until it is fixed.\n     * @see https://core.telegram.org/bots/api#sendvideonote\n     * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n    */\n\n  }, {\n    key: 'sendVideoNote',\n    value: function sendVideoNote(chatId, videoNote) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('video_note', videoNote, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.video_note = sendData[1];\n        this._fixAddFileThumbnail(options, opts);\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendVideoNote', opts);\n    }\n\n    /**\n     * Use this method to send a group of photos or videos as an album.\n     *\n     * **Documents and audio files can be only grouped in an album with messages of the same type**\n     *\n     * If you wish to [specify file options](https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files),\n     * add a `fileOptions` property to the target input in `media`.\n     *\n     * @param  {String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Array} media A JSON-serialized array describing photos and videos to be sent, must include 2–10 items\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, an array of the sent [Messages](https://core.telegram.org/bots/api#message)\n     * is returned.\n     * @see https://core.telegram.org/bots/api#sendmediagroup\n     * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n     */\n\n  }, {\n    key: 'sendMediaGroup',\n    value: function sendMediaGroup(chatId, media) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n\n      opts.formData = {};\n      var inputMedia = [];\n      var index = 0;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = media[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var input = _step.value;\n\n          var payload = Object.assign({}, input);\n          delete payload.media;\n          delete payload.fileOptions;\n          try {\n            var attachName = String(index);\n\n            var _formatSendData4 = this._formatSendData(attachName, input.media, input.fileOptions),\n                _formatSendData5 = _slicedToArray(_formatSendData4, 2),\n                formData = _formatSendData5[0],\n                fileId = _formatSendData5[1];\n\n            if (formData) {\n              opts.formData[attachName] = formData[attachName];\n              payload.media = 'attach://' + attachName;\n            } else {\n              payload.media = fileId;\n            }\n          } catch (ex) {\n            return Promise.reject(ex);\n          }\n          inputMedia.push(payload);\n          index++;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      opts.qs.media = stringify(inputMedia);\n\n      return this._request('sendMediaGroup', opts);\n    }\n\n    /**\n     * Send location.\n     * Use this method to send point on the map.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Float} latitude Latitude of location\n     * @param  {Float} longitude Longitude of location\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#sendlocation\n     */\n\n  }, {\n    key: 'sendLocation',\n    value: function sendLocation(chatId, latitude, longitude) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      form.chat_id = chatId;\n      form.latitude = latitude;\n      form.longitude = longitude;\n      return this._request('sendLocation', { form: form });\n    }\n\n    /**\n     * Use this method to edit live location messages sent by\n     * the bot or via the bot (for inline bots).\n     *\n     *  A location **can be edited until its live_period expires or editing is explicitly disabled by a call to [stopMessageLiveLocation](https://core.telegram.org/bots/api#stopmessagelivelocation)**\n     *\n     * Note that you must provide one of chat_id, message_id, or\n     * inline_message_id in your request.\n     *\n     * @param  {Float} latitude Latitude of location\n     * @param  {Float} longitude Longitude of location\n     * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n     * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned.\n     * @see https://core.telegram.org/bots/api#editmessagelivelocation\n     */\n\n  }, {\n    key: 'editMessageLiveLocation',\n    value: function editMessageLiveLocation(latitude, longitude) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.latitude = latitude;\n      form.longitude = longitude;\n      return this._request('editMessageLiveLocation', { form: form });\n    }\n\n    /**\n     * Use this method to stop updating a live location message sent by\n     * the bot or via the bot (for inline bots) before live_period expires.\n     *\n     * Note that you must provide one of chat_id, message_id, or\n     * inline_message_id in your request.\n     *\n     * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n     * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned.\n     * @see https://core.telegram.org/bots/api#stopmessagelivelocation\n     */\n\n  }, {\n    key: 'stopMessageLiveLocation',\n    value: function stopMessageLiveLocation() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('stopMessageLiveLocation', { form: form });\n    }\n\n    /**\n     * Send venue.\n     * Use this method to send information about a venue.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Float} latitude Latitude of location\n     * @param  {Float} longitude Longitude of location\n     * @param  {String} title Name of the venue\n     * @param  {String} address Address of the venue\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned.\n     * @see https://core.telegram.org/bots/api#sendvenue\n     */\n\n  }, {\n    key: 'sendVenue',\n    value: function sendVenue(chatId, latitude, longitude, title, address) {\n      var form = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n\n      form.chat_id = chatId;\n      form.latitude = latitude;\n      form.longitude = longitude;\n      form.title = title;\n      form.address = address;\n      return this._request('sendVenue', { form: form });\n    }\n\n    /**\n     * Send contact.\n     * Use this method to send phone contacts.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} phoneNumber Contact's phone number\n     * @param  {String} firstName Contact's first name\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#sendcontact\n     */\n\n  }, {\n    key: 'sendContact',\n    value: function sendContact(chatId, phoneNumber, firstName) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      form.chat_id = chatId;\n      form.phone_number = phoneNumber;\n      form.first_name = firstName;\n      return this._request('sendContact', { form: form });\n    }\n\n    /**\n     * Send poll.\n     * Use this method to send a native poll.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the group/channel\n     * @param  {String} question Poll question, 1-300 characters\n     * @param  {Array} pollOptions Poll options, between 2-10 options (only 1-100 characters each)\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#sendpoll\n     */\n\n  }, {\n    key: 'sendPoll',\n    value: function sendPoll(chatId, question, pollOptions) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      form.chat_id = chatId;\n      form.question = question;\n      form.options = stringify(pollOptions);\n      return this._request('sendPoll', { form: form });\n    }\n\n    /**\n     * Send Dice\n     * Use this method to send an animated emoji that will display a random value.\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}  On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#senddice\n     */\n\n  }, {\n    key: 'sendDice',\n    value: function sendDice(chatId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('dice');\n        opts.formData = sendData[0];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendDice', opts);\n    }\n\n    /**\n     * Send chat action.\n     *\n     * Use this method when you need to tell the user that something is happening on the bot's side.\n     * **The status is set for 5 seconds or less** (when a message arrives from your bot, Telegram clients clear its typing status).\n     *\n     *  Action `typing` for [text messages](https://core.telegram.org/bots/api#sendmessage),\n     * `upload_photo` for [photos](https://core.telegram.org/bots/api#sendphoto), `record_video` or `upload_video` for [videos](https://core.telegram.org/bots/api#sendvideo),\n     * `record_voice` or `upload_voice` for [voice notes](https://core.telegram.org/bots/api#sendvoice), `upload_document` for [general files](https://core.telegram.org/bots/api#senddocument),\n     * `choose_sticker` for [stickers](https://core.telegram.org/bots/api#sendsticker), `find_location` for [location data](https://core.telegram.org/bots/api#sendlocation),\n     * `record_video_note` or `upload_video_note` for [video notes](https://core.telegram.org/bots/api#sendvideonote).\n     *\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} action Type of action to broadcast.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#sendchataction\n     */\n\n  }, {\n    key: 'sendChatAction',\n    value: function sendChatAction(chatId, action) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.action = action;\n      return this._request('sendChatAction', { form: form });\n    }\n\n    /**\n     * Use this method to get a list of profile pictures for a user.\n     * Returns a [UserProfilePhotos](https://core.telegram.org/bots/api#userprofilephotos) object.\n     * This method has an [older, compatible signature][getUserProfilePhotos-v0.25.0]\n     * that is being deprecated.\n     *\n     * @param  {Number} userId  Unique identifier of the target user\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}  Returns a [UserProfilePhotos](https://core.telegram.org/bots/api#userprofilephotos) object\n     * @see https://core.telegram.org/bots/api#getuserprofilephotos\n     */\n\n  }, {\n    key: 'getUserProfilePhotos',\n    value: function getUserProfilePhotos(userId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      /* The older method signature was getUserProfilePhotos(userId, offset, limit).\n       * We need to ensure backwards-compatibility while maintaining\n       * consistency of the method signatures throughout the library */\n      if ((typeof form === 'undefined' ? 'undefined' : _typeof(form)) !== 'object') {\n        /* eslint-disable no-param-reassign, prefer-rest-params */\n        deprecate('The method signature getUserProfilePhotos(userId, offset, limit) has been deprecated since v0.25.0');\n        form = {\n          offset: arguments[1],\n          limit: arguments[2]\n        };\n        /* eslint-enable no-param-reassign, prefer-rest-params */\n      }\n      form.user_id = userId;\n      return this._request('getUserProfilePhotos', { form: form });\n    }\n\n    /**\n     * Get file.\n     * Use this method to get basic info about a file and prepare it for downloading.\n     *\n     * Attention: **link will be valid for 1 hour.**\n     *\n     * @param  {String} fileId  File identifier to get info about\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, a [File](https://core.telegram.org/bots/api#file) object is returned\n     * @see https://core.telegram.org/bots/api#getfile\n     */\n\n  }, {\n    key: 'getFile',\n    value: function getFile(fileId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.file_id = fileId;\n      return this._request('getFile', { form: form });\n    }\n\n    /**\n      * Use this method to ban a user in a group, a supergroup or a channel.\n      * In the case of supergroups and channels, the user will not be able to\n      * return to the chat on their own using invite links, etc., unless unbanned first..\n      *\n      * The **bot must be an administrator in the group, supergroup or a channel** for this to work.\n      *\n      *\n      * @param  {Number|String} chatId   Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n      * @param  {Number} userId  Unique identifier of the target user\n      * @param  {Object} [options] Additional Telegram query options\n      * @return {Promise} True on success.\n      * @see https://core.telegram.org/bots/api#banchatmember\n      */\n\n  }, {\n    key: 'banChatMember',\n    value: function banChatMember(chatId, userId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.user_id = userId;\n      return this._request('banChatMember', { form: form });\n    }\n\n    /**\n    * Use this method to unban a previously kicked user in a supergroup.\n    * The user will not return to the group automatically, but will be\n    * able to join via link, etc.\n    *\n    * The **bot must be an administrator** in the supergroup or channel for this to work.\n    *\n    * **By default**, this method guarantees that after the call the user is not a member of the chat, but will be able to join it.\n    * So **if the user is a member of the chat they will also be removed from the chat**. If you don't want this, use the parameter *only_if_banned*\n    *\n    * @param  {Number|String} chatId   Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n    * @param  {Number} userId  Unique identifier of the target user\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#unbanchatmember\n    */\n\n  }, {\n    key: 'unbanChatMember',\n    value: function unbanChatMember(chatId, userId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.user_id = userId;\n      return this._request('unbanChatMember', { form: form });\n    }\n\n    /**\n    * Use this method to restrict a user in a supergroup.\n    * The bot **must be an administrator in the supergroup** for this to work\n    * and must have the appropriate admin rights. Pass True for all boolean parameters\n    * to lift restrictions from a user. Returns True on success.\n    *\n    * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n    * @param  {Number} userId Unique identifier of the target user\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#restrictchatmember\n    */\n\n  }, {\n    key: 'restrictChatMember',\n    value: function restrictChatMember(chatId, userId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.user_id = userId;\n      return this._request('restrictChatMember', { form: form });\n    }\n\n    /**\n     * Use this method to promote or demote a user in a supergroup or a channel.\n     * The bot **must be an administrator** in the chat for this to work\n     * and must have the appropriate admin rights. Pass False for all boolean parameters to demote a user.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Number} userId\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success.\n     * @see https://core.telegram.org/bots/api#promotechatmember\n     */\n\n  }, {\n    key: 'promoteChatMember',\n    value: function promoteChatMember(chatId, userId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.user_id = userId;\n      return this._request('promoteChatMember', { form: form });\n    }\n\n    /**\n     * Use this method to set a custom title for an administrator in a supergroup promoted by the bot.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Number} userId Unique identifier of the target user\n     * @param  {String} customTitle New custom title for the administrator; 0-16 characters, emoji are not allowed\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setchatadministratorcustomtitle\n     */\n\n  }, {\n    key: 'setChatAdministratorCustomTitle',\n    value: function setChatAdministratorCustomTitle(chatId, userId, customTitle) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      form.chat_id = chatId;\n      form.user_id = userId;\n      form.custom_title = customTitle;\n      return this._request('setChatAdministratorCustomTitle', { form: form });\n    }\n\n    /**\n     * Use this method to ban a channel chat in a supergroup or a channel.\n     *\n     * Until the chat is [unbanned](https://core.telegram.org/bots/api#unbanchatsenderchat), the owner of the banned chat won't be able to send messages on behalf of any of their channels.\n     * The bot **must be an administrator in the supergroup or channel** for this to work and must have the appropriate administrator rights\n     *\n     * @param  {Number|String} chatId   Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Number} senderChatId  Unique identifier of the target user\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success.\n     * @see https://core.telegram.org/bots/api#banchatsenderchat\n     */\n\n  }, {\n    key: 'banChatSenderChat',\n    value: function banChatSenderChat(chatId, senderChatId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.sender_chat_id = senderChatId;\n      return this._request('banChatSenderChat', { form: form });\n    }\n\n    /**\n    * Use this method to unban a previously banned channel chat in a supergroup or channel.\n    *\n    * The bot **must be an administrator** for this to work and must have the appropriate administrator rights.\n    *\n    * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n    * @param  {Number} senderChatId Unique identifier of the target user\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#unbanchatsenderchat\n    */\n\n  }, {\n    key: 'unbanChatSenderChat',\n    value: function unbanChatSenderChat(chatId, senderChatId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.sender_chat_id = senderChatId;\n      return this._request('unbanChatSenderChat', { form: form });\n    }\n\n    /**\n     * Use this method to set default chat permissions for all members.\n     *\n     * The bot **must be an administrator in the group or a supergroup** for this to\n     * work and **must have the `can_restrict_members` admin rights.**\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Array} chatPermissions New default chat permissions\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setchatpermissions\n     */\n\n  }, {\n    key: 'setChatPermissions',\n    value: function setChatPermissions(chatId, chatPermissions) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.permissions = stringify(chatPermissions);\n      return this._request('setChatPermissions', { form: form });\n    }\n\n    /**\n     * Use this method to generate a new primary invite link for a chat. **Any previously generated primary link is revoked**.\n     *\n     * The bot **must be an administrator in the chat** for this to work and must have the appropriate administrator rights.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Exported invite link as String on success.\n     * @see https://core.telegram.org/bots/api#exportchatinvitelink\n     */\n\n  }, {\n    key: 'exportChatInviteLink',\n    value: function exportChatInviteLink(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('exportChatInviteLink', { form: form });\n    }\n\n    /**\n     * Use this method to create an additional invite link for a chat.\n     *\n     * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n     *\n     * The link generated with this method can be revoked using the method [revokeChatInviteLink](https://core.telegram.org/bots/api#revokechatinvitelink)\n     *\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Object} The new invite link as [ChatInviteLink](https://core.telegram.org/bots/api#chatinvitelink) object\n     * @see https://core.telegram.org/bots/api#createchatinvitelink\n     */\n\n  }, {\n    key: 'createChatInviteLink',\n    value: function createChatInviteLink(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('createChatInviteLink', { form: form });\n    }\n\n    /**\n     * Use this method to edit a non-primary invite link created by the bot.\n     *\n     * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} inviteLink Text with the invite link to edit\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} The edited invite link as a [ChatInviteLink](https://core.telegram.org/bots/api#chatinvitelink) object\n     * @see https://core.telegram.org/bots/api#editchatinvitelink\n     */\n\n  }, {\n    key: 'editChatInviteLink',\n    value: function editChatInviteLink(chatId, inviteLink) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.invite_link = inviteLink;\n      return this._request('editChatInviteLink', { form: form });\n    }\n\n    /**\n     * Use this method to revoke an invite link created by the bot.\n     * Note: If the primary link is revoked, a new link is automatically generated\n     *\n     * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} inviteLink The invite link to revoke\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} The revoked invite link as [ChatInviteLink](https://core.telegram.org/bots/api#chatinvitelink) object\n     * @see https://core.telegram.org/bots/api#revokechatinvitelink\n     */\n\n  }, {\n    key: 'revokeChatInviteLink',\n    value: function revokeChatInviteLink(chatId, inviteLink) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.invite_link = inviteLink;\n      return this._request('revokeChatInviteLink', { form: form });\n    }\n\n    /**\n     * Use this method to approve a chat join request.\n     *\n     * The bot **must be an administrator in the chat** for this to work and **must have the `can_invite_users` administrator right.**\n     *\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Number} userId  Unique identifier of the target user\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#approvechatjoinrequest\n     */\n\n  }, {\n    key: 'approveChatJoinRequest',\n    value: function approveChatJoinRequest(chatId, userId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.user_id = userId;\n      return this._request('approveChatJoinRequest', { form: form });\n    }\n\n    /**\n     * Use this method to decline a chat join request.\n     *\n     * The bot **must be an administrator in the chat** for this to work and **must have the `can_invite_users` administrator right**.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Number} userId  Unique identifier of the target user\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#declinechatjoinrequest\n     */\n\n  }, {\n    key: 'declineChatJoinRequest',\n    value: function declineChatJoinRequest(chatId, userId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.user_id = userId;\n      return this._request('declineChatJoinRequest', { form: form });\n    }\n\n    /**\n     * Use this method to set a new profile photo for the chat. **Photos can't be changed for private chats**.\n     *\n     * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {stream.Stream|Buffer} photo A file path or a Stream.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setchatphoto\n     */\n\n  }, {\n    key: 'setChatPhoto',\n    value: function setChatPhoto(chatId, photo) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('photo', photo, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.photo = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('setChatPhoto', opts);\n    }\n\n    /**\n    * Use this method to delete a chat photo. **Photos can't be changed for private chats**.\n    *\n    * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n    *\n    * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#deletechatphoto\n    */\n\n  }, {\n    key: 'deleteChatPhoto',\n    value: function deleteChatPhoto(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('deleteChatPhoto', { form: form });\n    }\n\n    /**\n     * Use this method to change the title of a chat. **Titles can't be changed for private chats**.\n     *\n     * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} title New chat title, 1-255 characters\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setchattitle\n     */\n\n  }, {\n    key: 'setChatTitle',\n    value: function setChatTitle(chatId, title) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.title = title;\n      return this._request('setChatTitle', { form: form });\n    }\n\n    /**\n     * Use this method to change the description of a group, a supergroup or a channel.\n     *\n     * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} description New chat title, 0-255 characters\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setchatdescription\n     */\n\n  }, {\n    key: 'setChatDescription',\n    value: function setChatDescription(chatId, description) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.description = description;\n      return this._request('setChatDescription', { form: form });\n    }\n\n    /**\n     * Use this method to pin a message in a supergroup.\n     *\n     * If the chat is not a private chat, the **bot must be an administrator in the chat** for this to work and must have the `can_pin_messages` administrator\n     * right in a supergroup or `can_edit_messages` administrator right in a channel.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Number} messageId Identifier of a message to pin\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#pinchatmessage\n     */\n\n  }, {\n    key: 'pinChatMessage',\n    value: function pinChatMessage(chatId, messageId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.message_id = messageId;\n      return this._request('pinChatMessage', { form: form });\n    }\n\n    /**\n     * Use this method to remove a message from the list of pinned messages in a chat\n     *\n     * If the chat is not a private chat, the **bot must be an administrator in the chat** for this to work and must have the `can_pin_messages` administrator\n     * right in a supergroup or `can_edit_messages` administrator right in a channel.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#unpinchatmessage\n     */\n\n  }, {\n    key: 'unpinChatMessage',\n    value: function unpinChatMessage(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('unpinChatMessage', { form: form });\n    }\n\n    /**\n    * Use this method to clear the list of pinned messages in a chat.\n    *\n    * If the chat is not a private chat, the **bot must be an administrator in the chat** for this to work and must have the `can_pin_messages` administrator\n    * right in a supergroup or `can_edit_messages` administrator right in a channel.\n    *\n    * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#unpinallchatmessages\n    */\n\n  }, {\n    key: 'unpinAllChatMessages',\n    value: function unpinAllChatMessages(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('unpinAllChatMessages', { form: form });\n    }\n\n    /**\n     * Use this method for your bot to leave a group, supergroup or channel\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#leavechat\n     */\n\n  }, {\n    key: 'leaveChat',\n    value: function leaveChat(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('leaveChat', { form: form });\n    }\n\n    /**\n     * Use this method to get up to date information about the chat\n     * (current name of the user for one-on-one conversations, current\n     * username of a user, group or channel, etc.).\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`) or channel\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} [Chat](https://core.telegram.org/bots/api#chat) object on success\n     * @see https://core.telegram.org/bots/api#getchat\n     */\n\n  }, {\n    key: 'getChat',\n    value: function getChat(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('getChat', { form: form });\n    }\n\n    /**\n     * Use this method to get a list of administrators in a chat\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, returns an Array of [ChatMember](https://core.telegram.org/bots/api#chatmember) objects that contains information about all chat administrators except other bots.\n     * If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned\n     * @see https://core.telegram.org/bots/api#getchatadministrators\n     */\n\n  }, {\n    key: 'getChatAdministrators',\n    value: function getChatAdministrators(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('getChatAdministrators', { form: form });\n    }\n\n    /**\n    * Use this method to get the number of members in a chat.\n    *\n    * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} Int on success\n    * @see https://core.telegram.org/bots/api#getchatmembercount\n    */\n\n  }, {\n    key: 'getChatMemberCount',\n    value: function getChatMemberCount(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('getChatMemberCount', { form: form });\n    }\n\n    /**\n     * Use this method to get information about a member of a chat.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n     * @param  {Number} userId  Unique identifier of the target user\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} [ChatMember](https://core.telegram.org/bots/api#chatmember) object on success\n     * @see https://core.telegram.org/bots/api#getchatmember\n     */\n\n  }, {\n    key: 'getChatMember',\n    value: function getChatMember(chatId, userId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.user_id = userId;\n      return this._request('getChatMember', { form: form });\n    }\n\n    /**\n     * Use this method to set a new group sticker set for a supergroup.\n     *\n     * The bot **must be an administrator in the chat** for this to work and must have the appropriate administrator rights.\n     *\n     * **Note:** Use the field `can_set_sticker_set` optionally returned in [getChat](https://core.telegram.org/bots/api#getchat) requests to check if the bot can use this method.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param  {String} stickerSetName Name of the sticker set to be set as the group sticker set\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setchatstickerset\n     */\n\n  }, {\n    key: 'setChatStickerSet',\n    value: function setChatStickerSet(chatId, stickerSetName) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.sticker_set_name = stickerSetName;\n      return this._request('setChatStickerSet', { form: form });\n    }\n\n    /**\n     * Use this method to delete a group sticker set from a supergroup.\n     *\n     * Use the field `can_set_sticker_set` optionally returned in [getChat](https://core.telegram.org/bots/api#getchat) requests to check if the bot can use this method.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#deletechatstickerset\n     */\n\n  }, {\n    key: 'deleteChatStickerSet',\n    value: function deleteChatStickerSet(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('deleteChatStickerSet', { form: form });\n    }\n\n    /**\n     * Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Array of [Sticker](https://core.telegram.org/bots/api#sticker) objects\n     * @see https://core.telegram.org/bots/api#getforumtopiciconstickers\n     */\n\n  }, {\n    key: 'getForumTopicIconStickers',\n    value: function getForumTopicIconStickers(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('getForumTopicIconStickers', { form: form });\n    }\n\n    /**\n     * Use this method to create a topic in a forum supergroup chat.\n     * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n     *\n     * Returns information about the created topic as a [ForumTopic](https://core.telegram.org/bots/api#forumtopic) object.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param  {String} name Topic name, 1-128 characters\n     * @param  {Object} [options] Additional Telegram query options\n     * @see https://core.telegram.org/bots/api#createforumtopic\n     */\n\n  }, {\n    key: 'createForumTopic',\n    value: function createForumTopic(chatId, name) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.name = name;\n      return this._request('createForumTopic', { form: form });\n    }\n\n    /**\n     * Use this method to edit name and icon of a topic in a forum supergroup chat.\n     * The bot must be an administrator in the chat for this to work and must have can_manage_topics administrator rights, unless it is the creator of the topic.\n     *\n     * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n     * @param {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#editforumtopic\n     */\n\n  }, {\n    key: 'editForumTopic',\n    value: function editForumTopic(chatId, messageThreadId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.message_thread_id = messageThreadId;\n      return this._request('editForumTopic', { form: form });\n    }\n\n    /**\n     * Use this method to close an open topic in a forum supergroup chat.\n     * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic.\n     *\n     * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n     * @param {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#closeforumtopic\n     */\n\n  }, {\n    key: 'closeForumTopic',\n    value: function closeForumTopic(chatId, messageThreadId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.message_thread_id = messageThreadId;\n      return this._request('closeForumTopic', { form: form });\n    }\n\n    /**\n     * Use this method to reopen a closed topic in a forum supergroup chat.\n     * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic.\n     *\n     * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n     * @param {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#reopenforumtopic\n     */\n\n  }, {\n    key: 'reopenForumTopic',\n    value: function reopenForumTopic(chatId, messageThreadId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.message_thread_id = messageThreadId;\n      return this._request('reopenForumTopic', { form: form });\n    }\n\n    /**\n     * Use this method to delete a forum topic along with all its messages in a forum supergroup chat.\n     * The bot must be an administrator in the chat for this to work and must have the can_delete_messages administrator rights.\n     *\n     * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n     * @param {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#deleteforumtopic\n     */\n\n  }, {\n    key: 'deleteForumTopic',\n    value: function deleteForumTopic(chatId, messageThreadId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.message_thread_id = messageThreadId;\n      return this._request('deleteForumTopic', { form: form });\n    }\n\n    /**\n     * Use this method to clear the list of pinned messages in a forum topic.\n     * The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup.\n     *\n     * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n     * @param {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#unpinallforumtopicmessages\n     */\n\n  }, {\n    key: 'unpinAllForumTopicMessages',\n    value: function unpinAllForumTopicMessages(chatId, messageThreadId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.message_thread_id = messageThreadId;\n      return this._request('unpinAllForumTopicMessages', { form: form });\n    }\n\n    /**\n    * Use this method to edit the name of the 'General' topic in a forum supergroup chat.\n    * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n    * The topic will be automatically unhidden if it was hidden.\n    *\n    * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n    * @param {String} name New topic name, 1-128 characters\n    * @param {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#editgeneralforumtopic\n    */\n\n  }, {\n    key: 'editGeneralForumTopic',\n    value: function editGeneralForumTopic(chatId, name) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.name = name;\n      return this._request('editGeneralForumTopic', { form: form });\n    }\n\n    /**\n    * Use this method to close an open 'General' topic in a forum supergroup chat.\n    * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n    * The topic will be automatically unhidden if it was hidden.\n    *\n    * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n    * @param {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#closegeneralforumtopic\n    */\n\n  }, {\n    key: 'closeGeneralForumTopic',\n    value: function closeGeneralForumTopic(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('closeGeneralForumTopic', { form: form });\n    }\n\n    /**\n    * Use this method to reopen a closed 'General' topic in a forum supergroup chat.\n    * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n    * The topic will be automatically unhidden if it was hidden.\n    *\n    * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n    * @param {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#reopengeneralforumtopic\n    */\n\n  }, {\n    key: 'reopenGeneralForumTopic',\n    value: function reopenGeneralForumTopic(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('reopenGeneralForumTopic', { form: form });\n    }\n\n    /**\n    * Use this method to hide the 'General' topic in a forum supergroup chat.\n    * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n    * The topic will be automatically closed if it was open.\n    *\n    * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n    * @param {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#hidegeneralforumtopic\n    */\n\n  }, {\n    key: 'hideGeneralForumTopic',\n    value: function hideGeneralForumTopic(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('hideGeneralForumTopic', { form: form });\n    }\n\n    /**\n     * Use this method to unhide the 'General' topic in a forum supergroup chat.\n     * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights\n     *\n     * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#unhidegeneralforumtopic\n     */\n\n  }, {\n    key: 'unhideGeneralForumTopic',\n    value: function unhideGeneralForumTopic(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('unhideGeneralForumTopic', { form: form });\n    }\n\n    /**\n     * Use this method to clear the list of pinned messages in a General forum topic.\n     * The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup.\n     *\n     * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#unpinallgeneralforumtopicmessages\n     */\n\n  }, {\n    key: 'unpinAllGeneralForumTopicMessages',\n    value: function unpinAllGeneralForumTopicMessages(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('unhideGeneralForumTopic', { form: form });\n    }\n\n    /**\n     * Use this method to send answers to callback queries sent from\n     * [inline keyboards](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating).\n     *\n     * The answer will be displayed to the user as a notification at the top of the chat screen or as an alert.\n     *\n     * This method has **older, compatible signatures ([1][answerCallbackQuery-v0.27.1])([2][answerCallbackQuery-v0.29.0])**\n     * that are being deprecated.\n     *\n     * @param  {String} callbackQueryId Unique identifier for the query to be answered\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#answercallbackquery\n     */\n\n  }, {\n    key: 'answerCallbackQuery',\n    value: function answerCallbackQuery(callbackQueryId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      /* The older method signature (in/before v0.27.1) was answerCallbackQuery(callbackQueryId, text, showAlert).\n       * We need to ensure backwards-compatibility while maintaining\n       * consistency of the method signatures throughout the library */\n      if ((typeof form === 'undefined' ? 'undefined' : _typeof(form)) !== 'object') {\n        /* eslint-disable no-param-reassign, prefer-rest-params */\n        deprecate('The method signature answerCallbackQuery(callbackQueryId, text, showAlert) has been deprecated since v0.27.1');\n        form = {\n          callback_query_id: arguments[0],\n          text: arguments[1],\n          show_alert: arguments[2]\n        };\n        /* eslint-enable no-param-reassign, prefer-rest-params */\n      }\n      /* The older method signature (in/before v0.29.0) was answerCallbackQuery([options]).\n       * We need to ensure backwards-compatibility while maintaining\n       * consistency of the method signatures throughout the library. */\n      if ((typeof callbackQueryId === 'undefined' ? 'undefined' : _typeof(callbackQueryId)) === 'object') {\n        /* eslint-disable no-param-reassign, prefer-rest-params */\n        deprecate('The method signature answerCallbackQuery([options]) has been deprecated since v0.29.0');\n        form = callbackQueryId;\n        /* eslint-enable no-param-reassign, prefer-rest-params */\n      } else {\n        form.callback_query_id = callbackQueryId;\n      }\n      return this._request('answerCallbackQuery', { form: form });\n    }\n\n    /**\n     * Use this method to change the list of the bot's commands.\n     *\n     * See https://core.telegram.org/bots#commands for more details about bot commands\n     *\n     * @param  {Array} commands  List of bot commands to be set as the list of the [bot's commands](https://core.telegram.org/bots/api#botcommand). At most 100 commands can be specified.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setmycommands\n     */\n\n  }, {\n    key: 'setMyCommands',\n    value: function setMyCommands(commands) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.commands = stringify(commands);\n\n      if (form.scope) {\n        form.scope = stringify(form.scope);\n      }\n\n      return this._request('setMyCommands', { form: form });\n    }\n\n    /**\n     * Use this method to delete the list of the bot's commands for the given scope and user language.\n     *\n     *  After deletion, [higher level commands](https://core.telegram.org/bots/api#determining-list-of-commands) will be shown to affected users.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#deletemycommands\n     */\n\n  }, {\n    key: 'deleteMyCommands',\n    value: function deleteMyCommands() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('deleteMyCommands', { form: form });\n    }\n\n    /**\n     * Use this method to get the current list of the bot's commands for the given scope and user language.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Array of [BotCommand](https://core.telegram.org/bots/api#botcommand) on success. If commands aren't set, an empty list is returned.\n     * @see https://core.telegram.org/bots/api#getmycommands\n     */\n\n  }, {\n    key: 'getMyCommands',\n    value: function getMyCommands() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (form.scope) {\n        form.scope = stringify(form.scope);\n      }\n      return this._request('getMyCommands', { form: form });\n    }\n\n    /**\n     * Use this method to change the bot's name.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setmyname\n     */\n\n  }, {\n    key: 'setMyName',\n    value: function setMyName() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('setMyName', { form: form });\n    }\n\n    /**\n     * Use this method to get the current bot name for the given user language.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} [BotName](https://core.telegram.org/bots/api#botname) on success\n     * @see https://core.telegram.org/bots/api#getmyname\n     */\n\n  }, {\n    key: 'getMyName',\n    value: function getMyName() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('getMyName', { form: form });\n    }\n\n    /**\n     * Use this method to change the bot's description, which is shown in the chat with the bot if the chat is empty.\n     *\n     * Returns True on success.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setmydescription\n     */\n\n  }, {\n    key: 'setMyDescription',\n    value: function setMyDescription() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('setMyDescription', { form: form });\n    }\n\n    /**\n     * Use this method to get the current bot description for the given user language.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Returns [BotDescription](https://core.telegram.org/bots/api#botdescription) on success.\n     * @see https://core.telegram.org/bots/api#getmydescription\n     */\n\n  }, {\n    key: 'getMyDescription',\n    value: function getMyDescription() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('getMyDescription', { form: form });\n    }\n\n    /**\n     * Use this method to change the bot's short description, which is shown on the bot's profile page\n     * and is sent together with the link when users share the bot.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Returns True on success.\n     * @see https://core.telegram.org/bots/api#setmyshortdescription\n     */\n\n  }, {\n    key: 'setMyShortDescription',\n    value: function setMyShortDescription() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('setMyShortDescription', { form: form });\n    }\n\n    /**\n     * Use this method to get the current bot short description for the given user language.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Returns [BotShortDescription](https://core.telegram.org/bots/api#botshortdescription) on success.\n     * @see https://core.telegram.org/bots/api#getmyshortdescription\n     */\n\n  }, {\n    key: 'getMyShortDescription',\n    value: function getMyShortDescription() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('getMyShortDescription', { form: form });\n    }\n\n    /**\n     * Use this method to change the bot's menu button in a private chat, or the default menu button.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setchatmenubutton\n     */\n\n  }, {\n    key: 'setChatMenuButton',\n    value: function setChatMenuButton() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('setChatMenuButton', { form: form });\n    }\n\n    /**\n     * Use this method to get the current value of the bot's menu button in a private chat, or the default menu button.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} [MenuButton](https://core.telegram.org/bots/api#menubutton) on success\n     * @see https://core.telegram.org/bots/api#getchatmenubutton\n     */\n\n  }, {\n    key: 'getChatMenuButton',\n    value: function getChatMenuButton() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('getChatMenuButton', { form: form });\n    }\n\n    /**\n     * Use this method to change the default administrator rights requested by the bot when it's added as an administrator to groups or channels.\n     *\n     * These rights will be suggested to users, but they are are free to modify the list before adding the bot.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#getchatmenubutton\n     */\n\n  }, {\n    key: 'setMyDefaultAdministratorRights',\n    value: function setMyDefaultAdministratorRights() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('setMyDefaultAdministratorRights', { form: form });\n    }\n\n    /**\n     * Use this method to get the current default administrator rights of the bot.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} [ChatAdministratorRights](https://core.telegram.org/bots/api#chatadministratorrights) on success\n     * @see https://core.telegram.org/bots/api#getmydefaultadministratorrights\n     */\n\n  }, {\n    key: 'getMyDefaultAdministratorRights',\n    value: function getMyDefaultAdministratorRights() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('getMyDefaultAdministratorRights', { form: form });\n    }\n\n    /**\n     * Use this method to edit text or [game](https://core.telegram.org/bots/api#games) messages sent by the bot or via the bot (for inline bots).\n     *\n     * Note: that **you must provide one of chat_id, message_id, or inline_message_id** in your request.\n     *\n     * @param  {String} text  New text of the message\n     * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n     * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n     * @see https://core.telegram.org/bots/api#editmessagetext\n     */\n\n  }, {\n    key: 'editMessageText',\n    value: function editMessageText(text) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.text = text;\n      return this._request('editMessageText', { form: form });\n    }\n\n    /**\n     * Use this method to edit captions of messages sent by the bot or via the bot (for inline bots).\n     *\n     * Note: You **must provide one of chat_id, message_id, or inline_message_id** in your request.\n     *\n     * @param  {String} caption  New caption of the message\n     * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n     * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n     * @see https://core.telegram.org/bots/api#editmessagecaption\n     */\n\n  }, {\n    key: 'editMessageCaption',\n    value: function editMessageCaption(caption) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.caption = caption;\n      return this._request('editMessageCaption', { form: form });\n    }\n\n    /**\n     * Use this method to edit animation, audio, document, photo, or video messages.\n     *\n     * If a message is a part of a message album, then it can be edited only to a photo or a video.\n     *\n     * Otherwise, message type can be changed arbitrarily. When inline message is edited, new file can't be uploaded.\n     * Use previously uploaded file via its file_id or specify a URL.\n     *\n     * Note: You **must provide one of chat_id, message_id, or inline_message_id** in your request.\n     *\n     * @param  {Object} media  A JSON-serialized object for a new media content of the message\n     * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n     * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n     * @see https://core.telegram.org/bots/api#editmessagemedia\n     */\n\n  }, {\n    key: 'editMessageMedia',\n    value: function editMessageMedia(media) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var regexAttach = /attach:\\/\\/.+/;\n\n      if (typeof media.media === 'string' && regexAttach.test(media.media)) {\n        var opts = {\n          qs: form\n        };\n\n        opts.formData = {};\n\n        var payload = Object.assign({}, media);\n        delete payload.media;\n\n        try {\n          var attachName = String(0);\n\n          var _formatSendData6 = this._formatSendData(attachName, media.media.replace('attach://', ''), media.fileOptions),\n              _formatSendData7 = _slicedToArray(_formatSendData6, 1),\n              formData = _formatSendData7[0];\n\n          if (formData) {\n            opts.formData[attachName] = formData[attachName];\n            payload.media = 'attach://' + attachName;\n          } else {\n            throw new errors.FatalError('Failed to process the replacement action for your ' + media.type);\n          }\n        } catch (ex) {\n          return Promise.reject(ex);\n        }\n\n        opts.qs.media = stringify(payload);\n\n        return this._request('editMessageMedia', opts);\n      }\n\n      form.media = stringify(media);\n\n      return this._request('editMessageMedia', { form: form });\n    }\n\n    /**\n     * Use this method to edit only the reply markup of messages sent by the bot or via the bot (for inline bots).\n     *\n     * Note: You **must provide one of chat_id, message_id, or inline_message_id** in your request.\n     *\n     * @param  {Object} replyMarkup  A JSON-serialized object for an inline keyboard.\n     * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n     * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n     * @see https://core.telegram.org/bots/api#editmessagetext\n     */\n\n  }, {\n    key: 'editMessageReplyMarkup',\n    value: function editMessageReplyMarkup(replyMarkup) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.reply_markup = replyMarkup;\n      return this._request('editMessageReplyMarkup', { form: form });\n    }\n\n    /**\n     * Use this method to stop a poll which was sent by the bot.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the group/channel\n     * @param  {Number} pollId Identifier of the original message with the poll\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, the stopped [Poll](https://core.telegram.org/bots/api#poll) is returned\n     * @see https://core.telegram.org/bots/api#stoppoll\n     */\n\n  }, {\n    key: 'stopPoll',\n    value: function stopPoll(chatId, pollId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.message_id = pollId;\n      return this._request('stopPoll', { form: form });\n    }\n\n    /**\n     * Use this method to delete a message, including service messages, with the following limitations:\n     * - A message can only be deleted if it was sent less than 48 hours ago.\n     * - A dice message can only be deleted if it was sent more than 24 hours ago.\n     * - Bots can delete outgoing messages in groups and supergroups.\n     * - Bots can delete incoming messages in groups, supergroups and channels.\n     * - Bots granted `can_post_messages` permissions can delete outgoing messages in channels.\n     * - If the bot is an administrator of a group, it can delete any message there.\n     * - If the bot has `can_delete_messages` permission in a supergroup, it can delete any message there.\n     *\n     * @param  {Number|String} chatId  Unique identifier of the target chat\n     * @param  {Number} messageId  Unique identifier of the target message\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#deletemessage\n     */\n\n  }, {\n    key: 'deleteMessage',\n    value: function deleteMessage(chatId, messageId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.message_id = messageId;\n      return this._request('deleteMessage', { form: form });\n    }\n\n    /**\n     * Use this method to send static .WEBP, [animated](https://telegram.org/blog/animated-stickers) .TGS,\n     * or [video](https://telegram.org/blog/video-stickers-better-reactions) .WEBM stickers.\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String|stream.Stream|Buffer} sticker A file path, Stream or Buffer.\n     * Can also be a `file_id` previously uploaded. Stickers are WebP format files.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned\n     * @see https://core.telegram.org/bots/api#sendsticker\n     */\n\n  }, {\n    key: 'sendSticker',\n    value: function sendSticker(chatId, sticker) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('sticker', sticker, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.sticker = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendSticker', opts);\n    }\n\n    /**\n     * Use this method to get a sticker set.\n     *\n     * @param  {String} name Name of the sticker set\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, a [StickerSet](https://core.telegram.org/bots/api#stickerset) object is returned\n     * @see https://core.telegram.org/bots/api#getstickerset\n     */\n\n  }, {\n    key: 'getStickerSet',\n    value: function getStickerSet(name) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.name = name;\n      return this._request('getStickerSet', { form: form });\n    }\n\n    /**\n     * Use this method to get information about custom emoji stickers by their identifiers.\n     *\n     * @param  {Array} custom_emoji_ids List of custom emoji identifiers. At most 200 custom emoji identifiers can be specified.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Array of [Sticker](https://core.telegram.org/bots/api#sticker) objects.\n     * @see https://core.telegram.org/bots/api#getcustomemojistickers\n     */\n\n  }, {\n    key: 'getCustomEmojiStickers',\n    value: function getCustomEmojiStickers(customEmojiIds) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.custom_emoji_ids = stringify(customEmojiIds);\n      return this._request('getCustomEmojiStickers', { form: form });\n    }\n\n    /**\n     * Use this method to upload a file with a sticker for later use in *createNewStickerSet* and *addStickerToSet* methods (can be used multiple\n     * times).\n     *\n     * @param  {Number} userId User identifier of sticker file owner\n     * @param  {String|stream.Stream|Buffer} sticker A file path or a Stream with the sticker in .WEBP, .PNG, .TGS, or .WEBM format. Can also be a `file_id` previously uploaded.\n     * @param {String} stickerFormat Allow values:  `static`, `animated` or `video`\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} On success, a [File](https://core.telegram.org/bots/api#file) object is returned\n     * @see https://core.telegram.org/bots/api#uploadstickerfile\n     */\n\n  }, {\n    key: 'uploadStickerFile',\n    value: function uploadStickerFile(userId, sticker) {\n      var stickerFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'static';\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var fileOptions = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.user_id = userId;\n      opts.qs.sticker_format = stickerFormat;\n\n      try {\n        var sendData = this._formatSendData('sticker', sticker, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.sticker = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('uploadStickerFile', opts);\n    }\n\n    /**\n     * Use this method to create new sticker set owned by a user.\n     *\n     * The bot will be able to edit the created sticker set.\n     *\n     * You must use exactly one of the fields *png_sticker*, *tgs_sticker*, or *webm_sticker*\n     *\n     * @param  {Number} userId User identifier of created sticker set owner\n     * @param  {String} name Short name of sticker set, to be used in `t.me/addstickers/` URLs (e.g.,   *\"animals\"*). Can contain only english letters, digits and underscores.\n     *  Must begin with a letter, can't contain consecutive underscores and must end in `\"_by_<bot_username>\"`. `<bot_username>` is case insensitive. 1-64 characters.\n      * @param  {String} title Sticker set title, 1-64 characters\n     * @param  {String|stream.Stream|Buffer} pngSticker Png image with the sticker, must be up to 512 kilobytes in size,\n     *  dimensions must not exceed 512px, and either width or height must be exactly 512px.\n     * @param  {String} emojis One or more emoji corresponding to the sticker\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise}  True on success\n     * @see https://core.telegram.org/bots/api#createnewstickerset\n     */\n\n  }, {\n    key: 'createNewStickerSet',\n    value: function createNewStickerSet(userId, name, title, pngSticker, emojis) {\n      var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n      var fileOptions = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.user_id = userId;\n      opts.qs.name = name;\n      opts.qs.title = title;\n      opts.qs.emojis = emojis;\n      opts.qs.mask_position = stringify(options.mask_position);\n      try {\n        var sendData = this._formatSendData('png_sticker', pngSticker, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.png_sticker = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('createNewStickerSet', opts);\n    }\n\n    /**\n     * Use this method to add a new sticker to a set created by the bot.\n     *\n     * You must use exactly one of the fields *png_sticker*, *tgs_sticker*, or *webm_sticker*\n     *\n     * Animated stickers can be added to animated sticker sets and only to them:\n     * - Animated sticker sets can have up to 50 stickers.\n     * - Static sticker sets can have up to 120 stickers\n     *\n     * @param  {Number} userId User identifier of sticker set owner\n     * @param  {String} name Sticker set name\n     * @param  {String|stream.Stream|Buffer} sticker Png image with the sticker (must be up to 512 kilobytes in size,\n     * dimensions must not exceed 512px, and either width or height must be exactly 512px, [TGS animation](https://core.telegram.org/stickers#animated-sticker-requirements)\n     * with the sticker or [WEBM video](https://core.telegram.org/stickers#video-sticker-requirements) with the sticker.\n     * @param  {String} emojis One or more emoji corresponding to the sticker\n     * @param  {String} stickerType Allow values: `png_sticker`, `tgs_sticker`, or `webm_sticker`.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise}  True on success\n     * @see https://core.telegram.org/bots/api#addstickertoset\n     */\n\n  }, {\n    key: 'addStickerToSet',\n    value: function addStickerToSet(userId, name, sticker, emojis) {\n      var stickerType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'png_sticker';\n      var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n      var fileOptions = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.user_id = userId;\n      opts.qs.name = name;\n      opts.qs.emojis = emojis;\n      opts.qs.mask_position = stringify(options.mask_position);\n\n      if (typeof stickerType !== 'string' || ['png_sticker', 'tgs_sticker', 'webm_sticker'].indexOf(stickerType) === -1) {\n        return Promise.reject(new Error('stickerType must be a string and the allow types is: png_sticker, tgs_sticker, webm_sticker'));\n      }\n\n      try {\n        var sendData = this._formatSendData(stickerType, sticker, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs[stickerType] = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('addStickerToSet', opts);\n    }\n\n    /**\n     * Use this method to move a sticker in a set created by the bot to a specific position.\n     *\n     * @param  {String} sticker File identifier of the sticker\n     * @param  {Number} position New sticker position in the set, zero-based\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setstickerpositioninset\n     */\n\n  }, {\n    key: 'setStickerPositionInSet',\n    value: function setStickerPositionInSet(sticker, position) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.sticker = sticker;\n      form.position = position;\n      return this._request('setStickerPositionInSet', { form: form });\n    }\n\n    /**\n     * Use this method to delete a sticker from a set created by the bot.\n     *\n     * @param  {String} sticker File identifier of the sticker\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#deletestickerfromset\n     * @todo Add tests for this method!\n     */\n\n  }, {\n    key: 'deleteStickerFromSet',\n    value: function deleteStickerFromSet(sticker) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.sticker = sticker;\n      return this._request('deleteStickerFromSet', { form: form });\n    }\n\n    /**\n     * Use this method to change the list of emoji assigned to a regular or custom emoji sticker.\n     *\n     * The sticker must belong to a sticker set created by the bot.\n     *\n     * @param  {String} sticker File identifier of the sticker\n     * @param { Array } emojiList A JSON-serialized list of 1-20 emoji associated with the sticker\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setstickeremojilist\n     */\n\n  }, {\n    key: 'setStickerEmojiList',\n    value: function setStickerEmojiList(sticker, emojiList) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.sticker = sticker;\n      form.emoji_list = stringify(emojiList);\n      return this._request('setStickerEmojiList', { form: form });\n    }\n\n    /**\n     * Use this method to change the list of emoji assigned to a `regular` or `custom emoji` sticker.\n     *\n     * The sticker must belong to a sticker set created by the bot.\n     *\n     * @param  {String} sticker File identifier of the sticker\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setstickerkeywords\n     */\n\n  }, {\n    key: 'setStickerKeywords',\n    value: function setStickerKeywords(sticker) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.sticker = sticker;\n      if (form.keywords) {\n        form.keywords = stringify(form.keywords);\n      }\n      return this._request('setStickerKeywords', { form: form });\n    }\n\n    /**\n     * Use this method to change the [mask position](https://core.telegram.org/bots/api#maskposition) of a mask sticker.\n     *\n     * The sticker must belong to a sticker set created by the bot.\n     *\n     * @param  {String} sticker File identifier of the sticker\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setstickermaskposition\n     */\n\n  }, {\n    key: 'setStickerMaskPosition',\n    value: function setStickerMaskPosition(sticker) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.sticker = sticker;\n      if (form.mask_position) {\n        form.mask_position = stringify(form.mask_position);\n      }\n      return this._request('setStickerMaskPosition', { form: form });\n    }\n\n    /**\n     * Use this method to set the title of a created sticker set.\n     *\n     * The sticker must belong to a sticker set created by the bot.\n     *\n     * @param  {String} name Sticker set name\n     * @param  {String} title Sticker set title, 1-64 characters\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setstickersettitle\n     */\n\n  }, {\n    key: 'setStickerSetTitle',\n    value: function setStickerSetTitle(name, title) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.name = name;\n      form.title = title;\n      return this._request('setStickerSetTitle', { form: form });\n    }\n\n    /**\n     * Use this method to add a thumb to a set created by the bot.\n     *\n     * Animated thumbnails can be set for animated sticker sets only. Video thumbnails can be set only for video sticker sets only\n     *\n     * @param  {Number} userId User identifier of sticker set owner\n     * @param  {String} name Sticker set name\n     * @param  {String|stream.Stream|Buffer} thumbnail A .WEBP or .PNG image with the thumbnail,\n     * must be up to 128 kilobytes in size and have width and height exactly 100px,\n     * a TGS animation with the thumbnail up to 32 kilobytes in size or a WEBM video with the thumbnail up to 32 kilobytes in size.\n     *\n     * Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram\n     * to get a file from the Internet, or upload a new one. Animated sticker set thumbnails can't be uploaded via HTTP URL.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setstickersetthumbnail\n     */\n\n  }, {\n    key: 'setStickerSetThumbnail',\n    value: function setStickerSetThumbnail(userId, name, thumbnail) {\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var fileOptions = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.user_id = userId;\n      opts.qs.name = name;\n      opts.qs.mask_position = stringify(options.mask_position);\n      try {\n        var sendData = this._formatSendData('thumbnail', thumbnail, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.thumbnail = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('setStickerSetThumbnail', opts);\n    }\n\n    /**\n     * Use this method to set the thumbnail of a custom emoji sticker set.\n     *\n     * The sticker must belong to a sticker set created by the bot.\n     *\n     * @param  {String} name Sticker set name\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setcustomemojistickersetthumbnail\n     */\n\n  }, {\n    key: 'setCustomEmojiStickerSetThumbnail',\n    value: function setCustomEmojiStickerSetThumbnail(name) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.name = name;\n      return this._request('setCustomEmojiStickerSetThumbnail', { form: form });\n    }\n\n    /**\n     * Use this method to delete a sticker set that was created by the bot.\n     *\n     * The sticker must belong to a sticker set created by the bot.\n     *\n     * @param  {String} name Sticker set name\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#deletestickerset\n     */\n\n  }, {\n    key: 'deleteStickerSet',\n    value: function deleteStickerSet(name) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.name = name;\n      return this._request('deleteStickerSet', { form: form });\n    }\n\n    /**\n     * Send answers to an inline query.\n     *\n     * Note: No more than 50 results per query are allowed.\n     *\n     * @param  {String} inlineQueryId Unique identifier of the query\n     * @param  {InlineQueryResult[]} results An array of results for the inline query\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, True is returned\n     * @see https://core.telegram.org/bots/api#answerinlinequery\n     */\n\n  }, {\n    key: 'answerInlineQuery',\n    value: function answerInlineQuery(inlineQueryId, results) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.inline_query_id = inlineQueryId;\n      form.results = stringify(results);\n      return this._request('answerInlineQuery', { form: form });\n    }\n\n    /**\n     * Use this method to set the result of an interaction with a [Web App](https://core.telegram.org/bots/webapps)\n     * and send a corresponding message on behalf of the user to the chat from which the query originated.\n     *\n     * @param  {String} webAppQueryId Unique identifier for the query to be answered\n     * @param  {InlineQueryResult} result object that represents one result of an inline query\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, a [SentWebAppMessage](https://core.telegram.org/bots/api#sentwebappmessage) object is returned\n     * @see https://core.telegram.org/bots/api#answerwebappquery\n     */\n\n  }, {\n    key: 'answerWebAppQuery',\n    value: function answerWebAppQuery(webAppQueryId, result) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.web_app_query_id = webAppQueryId;\n      form.result = stringify(result);\n      return this._request('answerWebAppQuery', { form: form });\n    }\n\n    /**\n     * Use this method to send an invoice.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} title Product name, 1-32 characters\n     * @param  {String} description Product description, 1-255 characters\n     * @param  {String} payload Bot defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.\n     * @param  {String} providerToken Payments provider token, obtained via `@BotFather`\n     * @param  {String} currency Three-letter ISO 4217 currency code\n     * @param  {Array} prices Breakdown of prices\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned\n     * @see https://core.telegram.org/bots/api#sendinvoice\n     */\n\n  }, {\n    key: 'sendInvoice',\n    value: function sendInvoice(chatId, title, description, payload, providerToken, currency, prices) {\n      var form = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : {};\n\n      form.chat_id = chatId;\n      form.title = title;\n      form.description = description;\n      form.payload = payload;\n      form.provider_token = providerToken;\n      form.currency = currency;\n      form.prices = stringify(prices);\n      form.provider_data = stringify(form.provider_data);\n      if (form.suggested_tip_amounts) {\n        form.suggested_tip_amounts = stringify(form.suggested_tip_amounts);\n      }\n      return this._request('sendInvoice', { form: form });\n    }\n\n    /**\n    * Use this method to create a link for an invoice.\n    *\n    * @param {String} title Product name, 1-32 characters\n    * @param {String} description Product description, 1-255 characters\n    * @param {String} payload Bot defined invoice payload\n    * @param {String} providerToken Payment provider token\n    * @param {String} currency Three-letter ISO 4217 currency code\n    * @param {Array} prices Breakdown of prices\n    * @param {Object} [options] Additional Telegram query options\n    * @returns {Promise} The created invoice link as String on success.\n    * @see https://core.telegram.org/bots/api#createinvoicelink\n    */\n\n  }, {\n    key: 'createInvoiceLink',\n    value: function createInvoiceLink(title, description, payload, providerToken, currency, prices) {\n      var form = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n\n      form.title = title;\n      form.description = description;\n      form.payload = payload;\n      form.provider_token = providerToken;\n      form.currency = currency;\n      form.prices = stringify(prices);\n      return this._request('createInvoiceLink', { form: form });\n    }\n\n    /**\n    * Use this method to reply to shipping queries.\n    *\n    * If you sent an invoice requesting a shipping address and the parameter is_flexible was specified,\n    * the Bot API will send an [Update](https://core.telegram.org/bots/api#update) with a shipping_query field to the bot\n    *\n    * @param  {String} shippingQueryId  Unique identifier for the query to be answered\n    * @param  {Boolean} ok Specify if delivery of the product is possible\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} On success, True is returned\n    * @see https://core.telegram.org/bots/api#answershippingquery\n    */\n\n  }, {\n    key: 'answerShippingQuery',\n    value: function answerShippingQuery(shippingQueryId, ok) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.shipping_query_id = shippingQueryId;\n      form.ok = ok;\n      form.shipping_options = stringify(form.shipping_options);\n      return this._request('answerShippingQuery', { form: form });\n    }\n\n    /**\n     * Use this method to respond to such pre-checkout queries\n     *\n     * Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of\n     * an [Update](https://core.telegram.org/bots/api#update) with the field *pre_checkout_query*.\n     *\n     * **Note:** The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.\n     *\n     * @param  {String} preCheckoutQueryId  Unique identifier for the query to be answered\n     * @param  {Boolean} ok Specify if every order details are ok\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, True is returned\n     * @see https://core.telegram.org/bots/api#answerprecheckoutquery\n     */\n\n  }, {\n    key: 'answerPreCheckoutQuery',\n    value: function answerPreCheckoutQuery(preCheckoutQueryId, ok) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.pre_checkout_query_id = preCheckoutQueryId;\n      form.ok = ok;\n      return this._request('answerPreCheckoutQuery', { form: form });\n    }\n\n    /**\n     * Use this method to send a game.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} gameShortName name of the game to be sent. Set up your games via `@BotFather`.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned\n     * @see https://core.telegram.org/bots/api#sendgame\n     */\n\n  }, {\n    key: 'sendGame',\n    value: function sendGame(chatId, gameShortName) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.game_short_name = gameShortName;\n      return this._request('sendGame', { form: form });\n    }\n\n    /**\n     * Use this method to set the score of the specified user in a game message.\n     *\n     * @param  {Number} userId  Unique identifier of the target user\n     * @param  {Number} score New score value, must be non-negative\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, if the message is not an inline message, the [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n     * @see https://core.telegram.org/bots/api#setgamescore\n     */\n\n  }, {\n    key: 'setGameScore',\n    value: function setGameScore(userId, score) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.user_id = userId;\n      form.score = score;\n      return this._request('setGameScore', { form: form });\n    }\n\n    /**\n     * Use this method to get data for high score tables.\n     *\n     * Will return the score of the specified user and several of their neighbors in a game.\n     *\n     * @param  {Number} userId  Unique identifier of the target user\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, returns an Array of [GameHighScore](https://core.telegram.org/bots/api#gamehighscore) objects\n     * @see https://core.telegram.org/bots/api#getgamehighscores\n     */\n\n  }, {\n    key: 'getGameHighScores',\n    value: function getGameHighScores(userId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.user_id = userId;\n      return this._request('getGameHighScores', { form: form });\n    }\n  }]);\n\n  return TelegramBot;\n}(EventEmitter);\n\nmodule.exports = TelegramBot;"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2722, "column": 0}, "map": {"version":3,"sources":["file:///C:/Project/Fiba/photobot/node_modules/node-telegram-bot-api/src/errors.js"],"sourcesContent":["exports.BaseError = class BaseError extends Error {\n  /**\n   * @class BaseError\n   * @constructor\n   * @private\n   * @param  {String} code Error code\n   * @param  {String} message Error message\n   */\n  constructor(code, message) {\n    super(`${code}: ${message}`);\n    this.code = code;\n  }\n  toJSON() {\n    return {\n      code: this.code,\n      message: this.message,\n    };\n  }\n};\n\n\nexports.FatalError = class FatalError extends exports.BaseError {\n  /**\n   * Fatal Error. Error code is `\"EFATAL\"`.\n   * @class FatalError\n   * @constructor\n   * @param  {String|Error} data Error object or message\n   */\n  constructor(data) {\n    const error = (typeof data === 'string') ? null : data;\n    const message = error ? error.message : data;\n    super('EFATAL', message);\n    if (error) this.stack = error.stack;\n  }\n};\n\n\nexports.ParseError = class ParseError extends exports.BaseError {\n  /**\n   * Error during parsing. Error code is `\"EPARSE\"`.\n   * @class ParseError\n   * @constructor\n   * @param  {String} message Error message\n   * @param  {http.IncomingMessage} response Server response\n   */\n  constructor(message, response) {\n    super('EPARSE', message);\n    this.response = response;\n  }\n};\n\n\nexports.TelegramError = class TelegramError extends exports.BaseError {\n  /**\n   * Error returned from Telegram. Error code is `\"ETELEGRAM\"`.\n   * @class TelegramError\n   * @constructor\n   * @param  {String} message Error message\n   * @param  {http.IncomingMessage} response Server response\n   */\n  constructor(message, response) {\n    super('ETELEGRAM', message);\n    this.response = response;\n  }\n};\n"],"names":[],"mappings":"AAAA,QAAQ,SAAS,GAAG,MAAM,kBAAkB;IAC1C;;;;;;GAMC,GACD,YAAY,IAAI,EAAE,OAAO,CAAE;QACzB,KAAK,CAAC,GAAG,KAAK,EAAE,EAAE,SAAS;QAC3B,IAAI,CAAC,IAAI,GAAG;IACd;IACA,SAAS;QACP,OAAO;YACL,MAAM,IAAI,CAAC,IAAI;YACf,SAAS,IAAI,CAAC,OAAO;QACvB;IACF;AACF;AAGA,QAAQ,UAAU,GAAG,MAAM,mBAAmB,QAAQ,SAAS;IAC7D;;;;;GAKC,GACD,YAAY,IAAI,CAAE;QAChB,MAAM,QAAQ,AAAC,OAAO,SAAS,WAAY,OAAO;QAClD,MAAM,UAAU,QAAQ,MAAM,OAAO,GAAG;QACxC,KAAK,CAAC,UAAU;QAChB,IAAI,OAAO,IAAI,CAAC,KAAK,GAAG,MAAM,KAAK;IACrC;AACF;AAGA,QAAQ,UAAU,GAAG,MAAM,mBAAmB,QAAQ,SAAS;IAC7D;;;;;;GAMC,GACD,YAAY,OAAO,EAAE,QAAQ,CAAE;QAC7B,KAAK,CAAC,UAAU;QAChB,IAAI,CAAC,QAAQ,GAAG;IAClB;AACF;AAGA,QAAQ,aAAa,GAAG,MAAM,sBAAsB,QAAQ,SAAS;IACnE;;;;;;GAMC,GACD,YAAY,OAAO,EAAE,QAAQ,CAAE;QAC7B,KAAK,CAAC,aAAa;QACnB,IAAI,CAAC,QAAQ,GAAG;IAClB;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2782, "column": 0}, "map": {"version":3,"sources":["file:///C:/Project/Fiba/photobot/node_modules/node-telegram-bot-api/src/telegramWebHook.js"],"sourcesContent":["const errors = require('./errors');\nconst debug = require('debug')('node-telegram-bot-api');\nconst https = require('https');\nconst http = require('http');\nconst fs = require('fs');\nconst bl = require('bl');\n\nclass TelegramBotWebHook {\n  /**\n   * Sets up a webhook to receive updates\n   * @param  {TelegramBot} bot\n   * @see https://core.telegram.org/bots/api#getting-updates\n   */\n  constructor(bot) {\n    this.bot = bot;\n    this.options = (typeof bot.options.webHook === 'boolean') ? {} : bot.options.webHook;\n    this.options.host = this.options.host || '0.0.0.0';\n    this.options.port = this.options.port || 8443;\n    this.options.https = this.options.https || {};\n    this.options.healthEndpoint = this.options.healthEndpoint || '/healthz';\n    this._healthRegex = new RegExp(this.options.healthEndpoint);\n    this._webServer = null;\n    this._open = false;\n    this._requestListener = this._requestListener.bind(this);\n    this._parseBody = this._parseBody.bind(this);\n\n    if (this.options.key && this.options.cert) {\n      debug('HTTPS WebHook enabled (by key/cert)');\n      this.options.https.key = fs.readFileSync(this.options.key);\n      this.options.https.cert = fs.readFileSync(this.options.cert);\n      this._webServer = https.createServer(this.options.https, this._requestListener);\n    } else if (this.options.pfx) {\n      debug('HTTPS WebHook enabled (by pfx)');\n      this.options.https.pfx = fs.readFileSync(this.options.pfx);\n      this._webServer = https.createServer(this.options.https, this._requestListener);\n    } else if (Object.keys(this.options.https).length) {\n      debug('HTTPS WebHook enabled by (https)');\n      this._webServer = https.createServer(this.options.https, this._requestListener);\n    } else {\n      debug('HTTP WebHook enabled');\n      this._webServer = http.createServer(this._requestListener);\n    }\n  }\n\n  /**\n   * Open WebHook by listening on the port\n   * @return {Promise}\n   */\n  open() {\n    if (this.isOpen()) {\n      return Promise.resolve();\n    }\n    return new Promise((resolve, reject) => {\n      this._webServer.listen(this.options.port, this.options.host, () => {\n        debug('WebHook listening on port %s', this.options.port);\n        this._open = true;\n        return resolve();\n      });\n\n      this._webServer.once('error', (err) => {\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * Close the webHook\n   * @return {Promise}\n   */\n  close() {\n    if (!this.isOpen()) {\n      return Promise.resolve();\n    }\n    return new Promise((resolve, reject) => {\n      this._webServer.close(error => {\n        if (error) return reject(error);\n        this._open = false;\n        return resolve();\n      });\n    });\n  }\n\n  /**\n   * Return `true` if server is listening. Otherwise, `false`.\n   */\n  isOpen() {\n    // NOTE: Since `http.Server.listening` was added in v5.7.0\n    // and we still need to support Node v4,\n    // we are going to fallback to 'this._open'.\n    // The following LOC would suffice for newer versions of Node.js\n    // return this._webServer.listening;\n    return this._open;\n  }\n\n  /**\n   * Handle error thrown during processing of webhook request.\n   * @private\n   * @param  {Error} error\n   */\n  _error(error) {\n    if (!this.bot.listeners('webhook_error').length) {\n      return console.error('error: [webhook_error] %j', error); // eslint-disable-line no-console\n    }\n    return this.bot.emit('webhook_error', error);\n  }\n\n  /**\n   * Handle request body by passing it to 'callback'\n   * @private\n   */\n  _parseBody(error, body) {\n    if (error) {\n      return this._error(new errors.FatalError(error));\n    }\n\n    let data;\n    try {\n      data = JSON.parse(body.toString());\n    } catch (parseError) {\n      return this._error(new errors.ParseError(parseError.message));\n    }\n\n    return this.bot.processUpdate(data);\n  }\n\n  /**\n   * Listener for 'request' event on server\n   * @private\n   * @see https://nodejs.org/docs/latest/api/http.html#http_http_createserver_requestlistener\n   * @see https://nodejs.org/docs/latest/api/https.html#https_https_createserver_options_requestlistener\n   */\n  _requestListener(req, res) {\n    debug('WebHook request URL: %s', req.url);\n    debug('WebHook request headers: %j', req.headers);\n\n    if (req.url.indexOf(this.bot.token) !== -1) {\n      if (req.method !== 'POST') {\n        debug('WebHook request isn\\'t a POST');\n        res.statusCode = 418; // I'm a teabot!\n        res.end();\n      } else {\n        req\n          .pipe(bl(this._parseBody))\n          .on('finish', () => res.end('OK'));\n      }\n    } else if (this._healthRegex.test(req.url)) {\n      debug('WebHook health check passed');\n      res.statusCode = 200;\n      res.end('OK');\n    } else {\n      debug('WebHook request unauthorized');\n      res.statusCode = 401;\n      res.end();\n    }\n  }\n}\n\nmodule.exports = TelegramBotWebHook;\n"],"names":[],"mappings":"AAAA,MAAM;AACN,MAAM,QAAQ,iIAAiB;AAC/B,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AAEN,MAAM;IACJ;;;;GAIC,GACD,YAAY,GAAG,CAAE;QACf,IAAI,CAAC,GAAG,GAAG;QACX,IAAI,CAAC,OAAO,GAAG,AAAC,OAAO,IAAI,OAAO,CAAC,OAAO,KAAK,YAAa,CAAC,IAAI,IAAI,OAAO,CAAC,OAAO;QACpF,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI;QACzC,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI;QACzC,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC;QAC5C,IAAI,CAAC,OAAO,CAAC,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,IAAI;QAC7D,IAAI,CAAC,YAAY,GAAG,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc;QAC1D,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI;QACvD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI;QAE3C,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;YACzC,MAAM;YACN,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG;YACzD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,GAAG,GAAG,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI;YAC3D,IAAI,CAAC,UAAU,GAAG,MAAM,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,gBAAgB;QAChF,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE;YAC3B,MAAM;YACN,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG;YACzD,IAAI,CAAC,UAAU,GAAG,MAAM,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,gBAAgB;QAChF,OAAO,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,EAAE;YACjD,MAAM;YACN,IAAI,CAAC,UAAU,GAAG,MAAM,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,gBAAgB;QAChF,OAAO;YACL,MAAM;YACN,IAAI,CAAC,UAAU,GAAG,KAAK,YAAY,CAAC,IAAI,CAAC,gBAAgB;QAC3D;IACF;IAEA;;;GAGC,GACD,OAAO;QACL,IAAI,IAAI,CAAC,MAAM,IAAI;YACjB,OAAO,QAAQ,OAAO;QACxB;QACA,OAAO,IAAI,QAAQ,CAAC,SAAS;YAC3B,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;gBAC3D,MAAM,gCAAgC,IAAI,CAAC,OAAO,CAAC,IAAI;gBACvD,IAAI,CAAC,KAAK,GAAG;gBACb,OAAO;YACT;YAEA,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC;gBAC7B,OAAO;YACT;QACF;IACF;IAEA;;;GAGC,GACD,QAAQ;QACN,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI;YAClB,OAAO,QAAQ,OAAO;QACxB;QACA,OAAO,IAAI,QAAQ,CAAC,SAAS;YAC3B,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;gBACpB,IAAI,OAAO,OAAO,OAAO;gBACzB,IAAI,CAAC,KAAK,GAAG;gBACb,OAAO;YACT;QACF;IACF;IAEA;;GAEC,GACD,SAAS;QACP,0DAA0D;QAC1D,wCAAwC;QACxC,4CAA4C;QAC5C,gEAAgE;QAChE,oCAAoC;QACpC,OAAO,IAAI,CAAC,KAAK;IACnB;IAEA;;;;GAIC,GACD,OAAO,KAAK,EAAE;QACZ,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,iBAAiB,MAAM,EAAE;YAC/C,OAAO,QAAQ,KAAK,CAAC,6BAA6B,QAAQ,iCAAiC;QAC7F;QACA,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,iBAAiB;IACxC;IAEA;;;GAGC,GACD,WAAW,KAAK,EAAE,IAAI,EAAE;QACtB,IAAI,OAAO;YACT,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,OAAO,UAAU,CAAC;QAC3C;QAEA,IAAI;QACJ,IAAI;YACF,OAAO,KAAK,KAAK,CAAC,KAAK,QAAQ;QACjC,EAAE,OAAO,YAAY;YACnB,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,OAAO,UAAU,CAAC,WAAW,OAAO;QAC7D;QAEA,OAAO,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC;IAChC;IAEA;;;;;GAKC,GACD,iBAAiB,GAAG,EAAE,GAAG,EAAE;QACzB,MAAM,2BAA2B,IAAI,GAAG;QACxC,MAAM,+BAA+B,IAAI,OAAO;QAEhD,IAAI,IAAI,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,MAAM,CAAC,GAAG;YAC1C,IAAI,IAAI,MAAM,KAAK,QAAQ;gBACzB,MAAM;gBACN,IAAI,UAAU,GAAG,KAAK,gBAAgB;gBACtC,IAAI,GAAG;YACT,OAAO;gBACL,IACG,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,GACvB,EAAE,CAAC,UAAU,IAAM,IAAI,GAAG,CAAC;YAChC;QACF,OAAO,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,GAAG,GAAG;YAC1C,MAAM;YACN,IAAI,UAAU,GAAG;YACjB,IAAI,GAAG,CAAC;QACV,OAAO;YACL,MAAM;YACN,IAAI,UAAU,GAAG;YACjB,IAAI,GAAG;QACT;IACF;AACF;AAEA,OAAO,OAAO,GAAG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2923, "column": 0}, "map": {"version":3,"sources":["file:///C:/Project/Fiba/photobot/node_modules/node-telegram-bot-api/src/telegramPolling.js"],"sourcesContent":["const errors = require('./errors');\nconst debug = require('debug')('node-telegram-bot-api');\nconst deprecate = require('./utils').deprecate;\nconst ANOTHER_WEB_HOOK_USED = 409;\n\n\nclass TelegramBotPolling {\n  /**\n   * Handles polling against the Telegram servers.\n   * @param  {TelegramBot} bot\n   * @see https://core.telegram.org/bots/api#getting-updates\n   */\n  constructor(bot) {\n    this.bot = bot;\n    this.options = (typeof bot.options.polling === 'boolean') ? {} : bot.options.polling;\n    this.options.interval = (typeof this.options.interval === 'number') ? this.options.interval : 300;\n    this.options.params = (typeof this.options.params === 'object') ? this.options.params : {};\n    this.options.params.offset = (typeof this.options.params.offset === 'number') ? this.options.params.offset : 0;\n    this.options.params.timeout = (typeof this.options.params.timeout === 'number') ? this.options.params.timeout : 10;\n    if (typeof this.options.timeout === 'number') {\n      deprecate('`options.polling.timeout` is deprecated. Use `options.polling.params` instead.');\n      this.options.params.timeout = this.options.timeout;\n    }\n    this._lastUpdate = 0;\n    this._lastRequest = null;\n    this._abort = false;\n    this._pollingTimeout = null;\n  }\n\n  /**\n   * Start polling\n   * @param  {Object} [options]\n   * @param  {Object} [options.restart]\n   * @return {Promise}\n   */\n  start(options = {}) {\n    if (this._lastRequest) {\n      if (!options.restart) {\n        return Promise.resolve();\n      }\n      return this.stop({\n        cancel: true,\n        reason: 'Polling restart',\n      }).then(() => {\n        return this._polling();\n      });\n    }\n    return this._polling();\n  }\n\n  /**\n   * Stop polling\n   * @param  {Object} [options] Options\n   * @param  {Boolean} [options.cancel] Cancel current request\n   * @param  {String} [options.reason] Reason for stopping polling\n   * @return {Promise}\n   */\n  stop(options = {}) {\n    if (!this._lastRequest) {\n      return Promise.resolve();\n    }\n    const lastRequest = this._lastRequest;\n    this._lastRequest = null;\n    clearTimeout(this._pollingTimeout);\n    if (options.cancel) {\n      const reason = options.reason || 'Polling stop';\n      lastRequest.cancel(reason);\n      return Promise.resolve();\n    }\n    this._abort = true;\n    return lastRequest.finally(() => {\n      this._abort = false;\n    });\n  }\n\n  /**\n   * Return `true` if is polling. Otherwise, `false`.\n   */\n  isPolling() {\n    return !!this._lastRequest;\n  }\n\n  /**\n   * Handle error thrown during polling.\n   * @private\n   * @param  {Error} error\n   */\n  _error(error) {\n    if (!this.bot.listeners('polling_error').length) {\n      return console.error('error: [polling_error] %j', error); // eslint-disable-line no-console\n    }\n    return this.bot.emit('polling_error', error);\n  }\n\n  /**\n   * Invokes polling (with recursion!)\n   * @return {Promise} promise of the current request\n   * @private\n   */\n  _polling() {\n    this._lastRequest = this\n      ._getUpdates()\n      .then(updates => {\n        this._lastUpdate = Date.now();\n        debug('polling data %j', updates);\n        updates.forEach(update => {\n          this.options.params.offset = update.update_id + 1;\n          debug('updated offset: %s', this.options.params.offset);\n          try {\n            this.bot.processUpdate(update);\n          } catch (err) {\n            err._processing = true;\n            throw err;\n          }\n        });\n        return null;\n      })\n      .catch(err => {\n        debug('polling error: %s', err.message);\n        if (!err._processing) {\n          return this._error(err);\n        }\n        delete err._processing;\n        /*\n         * An error occured while processing the items,\n         * i.e. in `this.bot.processUpdate()` above.\n         * We need to mark the already-processed items\n         * to avoid fetching them again once the application\n         * is restarted, or moves to next polling interval\n         * (in cases where unhandled rejections do not terminate\n         * the process).\n         * See https://github.com/yagop/node-telegram-bot-api/issues/36#issuecomment-268532067\n         */\n        if (!this.bot.options.badRejection) {\n          return this._error(err);\n        }\n        const opts = {\n          offset: this.options.params.offset,\n          limit: 1,\n          timeout: 0,\n        };\n        return this.bot.getUpdates(opts).then(() => {\n          return this._error(err);\n        }).catch(requestErr => {\n          /*\n           * We have been unable to handle this error.\n           * We have to log this to stderr to ensure devops\n           * understands that they may receive already-processed items\n           * on app restart.\n           * We simply can not rescue this situation, emit \"error\"\n           * event, with the hope that the application exits.\n           */\n          /* eslint-disable no-console */\n          const bugUrl = 'https://github.com/yagop/node-telegram-bot-api/issues/36#issuecomment-268532067';\n          console.error('error: Internal handling of The Offset Infinite Loop failed');\n          console.error(`error: Due to error '${requestErr}'`);\n          console.error('error: You may receive already-processed updates on app restart');\n          console.error(`error: Please see ${bugUrl} for more information`);\n          /* eslint-enable no-console */\n          return this.bot.emit('error', new errors.FatalError(err));\n        });\n      })\n      .finally(() => {\n        if (this._abort) {\n          debug('Polling is aborted!');\n        } else {\n          debug('setTimeout for %s miliseconds', this.options.interval);\n          this._pollingTimeout = setTimeout(() => this._polling(), this.options.interval);\n        }\n      });\n    return this._lastRequest;\n  }\n\n  /**\n   * Unset current webhook. Used when we detect that a webhook has been set\n   * and we are trying to poll. Polling and WebHook are mutually exclusive.\n   * @see https://core.telegram.org/bots/api#getting-updates\n   * @private\n   */\n  _unsetWebHook() {\n    debug('unsetting webhook');\n    return this.bot._request('setWebHook');\n  }\n\n  /**\n   * Retrieve updates\n   */\n  _getUpdates() {\n    debug('polling with options: %j', this.options.params);\n    return this.bot.getUpdates(this.options.params)\n      .catch(err => {\n        if (err.response && err.response.statusCode === ANOTHER_WEB_HOOK_USED) {\n          return this._unsetWebHook().then(() => {\n            return this.bot.getUpdates(this.options.params);\n          });\n        }\n        throw err;\n      });\n  }\n}\n\nmodule.exports = TelegramBotPolling;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3103, "column": 0}, "map": {"version":3,"sources":["file:///C:/Project/Fiba/photobot/node_modules/node-telegram-bot-api/src/telegram.js"],"sourcesContent":["// shims\nrequire('array.prototype.findindex').shim(); // for Node.js v0.x\n\nconst errors = require('./errors');\nconst TelegramBotWebHook = require('./telegramWebHook');\nconst TelegramBotPolling = require('./telegramPolling');\nconst debug = require('debug')('node-telegram-bot-api');\nconst EventEmitter = require('eventemitter3');\nconst fileType = require('file-type');\nconst request = require('@cypress/request-promise');\nconst streamedRequest = require('@cypress/request');\nconst qs = require('querystring');\nconst stream = require('stream');\nconst mime = require('mime');\nconst path = require('path');\nconst URL = require('url');\nconst fs = require('fs');\nconst pump = require('pump');\nconst deprecate = require('./utils').deprecate;\n\nconst _messageTypes = [\n  'text',\n  'animation',\n  'audio',\n  'channel_chat_created',\n  'contact',\n  'delete_chat_photo',\n  'dice',\n  'document',\n  'game',\n  'group_chat_created',\n  'invoice',\n  'left_chat_member',\n  'location',\n  'migrate_from_chat_id',\n  'migrate_to_chat_id',\n  'new_chat_members',\n  'new_chat_photo',\n  'new_chat_title',\n  'passport_data',\n  'photo',\n  'pinned_message',\n  'poll',\n  'sticker',\n  'successful_payment',\n  'supergroup_chat_created',\n  'video',\n  'video_note',\n  'voice',\n  'video_chat_started',\n  'video_chat_ended',\n  'video_chat_participants_invited',\n  'video_chat_scheduled',\n  'message_auto_delete_timer_changed',\n  'chat_invite_link',\n  'chat_member_updated',\n  'web_app_data',\n];\nconst _deprecatedMessageTypes = [\n  'new_chat_participant', 'left_chat_participant'\n];\n\n/**\n * JSON-serialize data. If the provided data is already a String,\n * return it as is.\n * @private\n * @param  {*} data\n * @return {String}\n */\nfunction stringify(data) {\n  if (typeof data === 'string') {\n    return data;\n  }\n  return JSON.stringify(data);\n}\n\n\nclass TelegramBot extends EventEmitter {\n  /**\n   * The different errors the library uses.\n   * @type {Object}\n   */\n  static get errors() {\n    return errors;\n  }\n\n  /**\n   * The types of message updates the library handles.\n   * @type {String[]}\n   */\n  static get messageTypes() {\n    return _messageTypes;\n  }\n\n  /**\n   * Add listener for the specified [event](https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#events).\n   * This is the usual `emitter.on()` method.\n   * @param  {String} event\n   * @param  {Function} listener\n   * @see {@link https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#events|Available events}\n   * @see https://nodejs.org/api/events.html#events_emitter_on_eventname_listener\n   */\n  on(event, listener) {\n    if (_deprecatedMessageTypes.indexOf(event) !== -1) {\n      const url = 'https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#events';\n      deprecate(`Events ${_deprecatedMessageTypes.join(',')} are deprecated. See the updated list of events: ${url}`);\n    }\n    super.on(event, listener);\n  }\n\n  /**\n   * Both request method to obtain messages are implemented. To use standard polling, set `polling: true`\n   * on `options`. Notice that [webHook](https://core.telegram.org/bots/api#setwebhook) will need a SSL certificate.\n   * Emits `message` when a message arrives.\n   *\n   * @class TelegramBot\n   * @constructor\n   * @param {String} token Bot Token\n   * @param {Object} [options]\n   * @param {Boolean|Object} [options.polling=false] Set true to enable polling or set options.\n   *  If a WebHook has been set, it will be deleted automatically.\n   * @param {String|Number} [options.polling.timeout=10] *Deprecated. Use `options.polling.params` instead*.\n   *  Timeout in seconds for long polling.\n   * @param {Boolean} [options.testEnvironment=false] Set true to  work with test enviroment.\n   * When working with the test environment, you may use HTTP links without TLS to test your Web App.\n   * @param {String|Number} [options.polling.interval=300] Interval between requests in miliseconds\n   * @param {Boolean} [options.polling.autoStart=true] Start polling immediately\n   * @param {Object} [options.polling.params] Parameters to be used in polling API requests.\n   *  See https://core.telegram.org/bots/api#getupdates for more information.\n   * @param  {Number} [options.polling.params.timeout=10] Timeout in seconds for long polling.\n   * @param {Boolean|Object} [options.webHook=false] Set true to enable WebHook or set options\n   * @param {String} [options.webHook.host=\"0.0.0.0\"] Host to bind to\n   * @param {Number} [options.webHook.port=8443] Port to bind to\n   * @param {String} [options.webHook.key] Path to file with PEM private key for webHook server.\n   *  The file is read **synchronously**!\n   * @param {String} [options.webHook.cert] Path to file with PEM certificate (public) for webHook server.\n   *  The file is read **synchronously**!\n   * @param {String} [options.webHook.pfx] Path to file with PFX private key and certificate chain for webHook server.\n   *  The file is read **synchronously**!\n   * @param {Boolean} [options.webHook.autoOpen=true] Open webHook immediately\n   * @param {Object} [options.webHook.https] Options to be passed to `https.createServer()`.\n   *  Note that `options.webHook.key`, `options.webHook.cert` and `options.webHook.pfx`, if provided, will be\n   *  used to override `key`, `cert` and `pfx` in this object, respectively.\n   *  See https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener for more information.\n   * @param {String} [options.webHook.healthEndpoint=\"/healthz\"] An endpoint for health checks that always responds with 200 OK\n   * @param {Boolean} [options.onlyFirstMatch=false] Set to true to stop after first match. Otherwise, all regexps are executed\n   * @param {Object} [options.request] Options which will be added for all requests to telegram api.\n   *  See https://github.com/request/request#requestoptions-callback for more information.\n   * @param {String} [options.baseApiUrl=\"https://api.telegram.org\"] API Base URl; useful for proxying and testing\n   * @param {Boolean} [options.filepath=true] Allow passing file-paths as arguments when sending files,\n   *  such as photos using `TelegramBot#sendPhoto()`. See [usage information][usage-sending-files-performance]\n   *  for more information on this option and its consequences.\n   * @param {Boolean} [options.badRejection=false] Set to `true`\n   *  **if and only if** the Node.js version you're using terminates the\n   *  process on unhandled rejections. This option is only for\n   *  *forward-compatibility purposes*.\n   * @see https://core.telegram.org/bots/api\n   */\n  constructor(token, options = {}) {\n    super();\n    this.token = token;\n    this.options = options;\n    this.options.polling = (typeof options.polling === 'undefined') ? false : options.polling;\n    this.options.webHook = (typeof options.webHook === 'undefined') ? false : options.webHook;\n    this.options.baseApiUrl = options.baseApiUrl || 'https://api.telegram.org';\n    this.options.filepath = (typeof options.filepath === 'undefined') ? true : options.filepath;\n    this.options.badRejection = (typeof options.badRejection === 'undefined') ? false : options.badRejection;\n    this._textRegexpCallbacks = [];\n    this._replyListenerId = 0;\n    this._replyListeners = [];\n    this._polling = null;\n    this._webHook = null;\n\n    if (options.polling) {\n      const autoStart = options.polling.autoStart;\n      if (typeof autoStart === 'undefined' || autoStart === true) {\n        this.startPolling();\n      }\n    }\n\n    if (options.webHook) {\n      const autoOpen = options.webHook.autoOpen;\n      if (typeof autoOpen === 'undefined' || autoOpen === true) {\n        this.openWebHook();\n      }\n    }\n  }\n\n  /**\n   * Generates url with bot token and provided path/method you want to be got/executed by bot\n   * @param  {String} path\n   * @return {String} url\n   * @private\n   * @see https://core.telegram.org/bots/api#making-requests\n   */\n  _buildURL(_path) {\n    return `${this.options.baseApiUrl}/bot${this.token}${this.options.testEnvironment ? '/test' : ''}/${_path}`;\n  }\n\n  /**\n   * Fix 'reply_markup' parameter by making it JSON-serialized, as\n   * required by the Telegram Bot API\n   * @param {Object} obj Object; either 'form' or 'qs'\n   * @private\n   * @see https://core.telegram.org/bots/api#sendmessage\n   */\n  _fixReplyMarkup(obj) {\n    const replyMarkup = obj.reply_markup;\n    if (replyMarkup && typeof replyMarkup !== 'string') {\n      obj.reply_markup = stringify(replyMarkup);\n    }\n  }\n\n  /**\n   * Fix 'entities' or 'caption_entities' or 'explanation_entities' parameter by making it JSON-serialized, as\n   * required by the Telegram Bot API\n   * @param {Object} obj Object;\n   * @private\n   * @see https://core.telegram.org/bots/api#sendmessage\n   * @see https://core.telegram.org/bots/api#copymessage\n   * @see https://core.telegram.org/bots/api#sendpoll\n   */\n  _fixEntitiesField(obj) {\n    const entities = obj.entities;\n    const captionEntities = obj.caption_entities;\n    const explanationEntities = obj.explanation_entities;\n    if (entities && typeof entities !== 'string') {\n      obj.entities = stringify(entities);\n    }\n\n    if (captionEntities && typeof captionEntities !== 'string') {\n      obj.caption_entities = stringify(captionEntities);\n    }\n\n    if (explanationEntities && typeof explanationEntities !== 'string') {\n      obj.explanation_entities = stringify(explanationEntities);\n    }\n  }\n\n  _fixAddFileThumbnail(options, opts) {\n    if (options.thumb) {\n      if (opts.formData === null) {\n        opts.formData = {};\n      }\n\n      const attachName = 'photo';\n      const [formData] = this._formatSendData(attachName, options.thumb.replace('attach://', ''));\n\n      if (formData) {\n        opts.formData[attachName] = formData[attachName];\n        opts.qs.thumbnail = `attach://${attachName}`;\n      }\n    }\n  }\n\n  /**\n   * Make request against the API\n   * @param  {String} _path API endpoint\n   * @param  {Object} [options]\n   * @private\n   * @return {Promise}\n   */\n  _request(_path, options = {}) {\n    if (!this.token) {\n      return Promise.reject(new errors.FatalError('Telegram Bot Token not provided!'));\n    }\n\n    if (this.options.request) {\n      Object.assign(options, this.options.request);\n    }\n\n    if (options.form) {\n      this._fixReplyMarkup(options.form);\n      this._fixEntitiesField(options.form);\n    }\n    if (options.qs) {\n      this._fixReplyMarkup(options.qs);\n    }\n\n    options.method = 'POST';\n    options.url = this._buildURL(_path);\n    options.simple = false;\n    options.resolveWithFullResponse = true;\n    options.forever = true;\n    debug('HTTP request: %j', options);\n    return request(options)\n      .then(resp => {\n        let data;\n        try {\n          data = resp.body = JSON.parse(resp.body);\n        } catch (err) {\n          throw new errors.ParseError(`Error parsing response: ${resp.body}`, resp);\n        }\n\n        if (data.ok) {\n          return data.result;\n        }\n\n        throw new errors.TelegramError(`${data.error_code} ${data.description}`, resp);\n      }).catch(error => {\n        // TODO: why can't we do `error instanceof errors.BaseError`?\n        if (error.response) throw error;\n        throw new errors.FatalError(error);\n      });\n  }\n\n  /**\n   * Format data to be uploaded; handles file paths, streams and buffers\n   * @param  {String} type\n   * @param  {String|stream.Stream|Buffer} data\n   * @param  {Object} fileOptions File options\n   * @param  {String} [fileOptions.filename] File name\n   * @param  {String} [fileOptions.contentType] Content type (i.e. MIME)\n   * @return {Array} formatted\n   * @return {Object} formatted[0] formData\n   * @return {String} formatted[1] fileId\n   * @throws Error if Buffer file type is not supported.\n   * @see https://npmjs.com/package/file-type\n   * @private\n   */\n  _formatSendData(type, data, fileOptions = {}) {\n    const deprecationMessage =\n      'See https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files' +\n      ' for more information on how sending files has been improved and' +\n      ' on how to disable this deprecation message altogether.';\n    let filedata = data;\n    let filename = fileOptions.filename;\n    let contentType = fileOptions.contentType;\n\n    if (data instanceof stream.Stream) {\n      if (!filename && data.path) {\n        // Will be 'null' if could not be parsed.\n        // For example, 'data.path' === '/?id=123' from 'request(\"https://example.com/?id=123\")'\n        const url = URL.parse(path.basename(data.path.toString()));\n        if (url.pathname) {\n          filename = qs.unescape(url.pathname);\n        }\n      }\n    } else if (Buffer.isBuffer(data)) {\n      if (!filename && !process.env.NTBA_FIX_350) {\n        deprecate(`Buffers will have their filenames default to \"filename\" instead of \"data\". ${deprecationMessage}`);\n        filename = 'data';\n      }\n      if (!contentType) {\n        const filetype = fileType(data);\n        if (filetype) {\n          contentType = filetype.mime;\n          const ext = filetype.ext;\n          if (ext && !process.env.NTBA_FIX_350) {\n            filename = `${filename}.${ext}`;\n          }\n        } else if (!process.env.NTBA_FIX_350) {\n          deprecate(`An error will no longer be thrown if file-type of buffer could not be detected. ${deprecationMessage}`);\n          throw new errors.FatalError('Unsupported Buffer file-type');\n        }\n      }\n    } else if (data) {\n      if (this.options.filepath && fs.existsSync(data)) {\n        filedata = fs.createReadStream(data);\n        if (!filename) {\n          filename = path.basename(data);\n        }\n      } else {\n        return [null, data];\n      }\n    } else {\n      return [null, data];\n    }\n\n    filename = filename || 'filename';\n    contentType = contentType || mime.lookup(filename);\n    if (process.env.NTBA_FIX_350) {\n      contentType = contentType || 'application/octet-stream';\n    } else {\n      deprecate(`In the future, content-type of files you send will default to \"application/octet-stream\". ${deprecationMessage}`);\n    }\n\n    // TODO: Add missing file extension.\n\n    return [{\n      [type]: {\n        value: filedata,\n        options: {\n          filename,\n          contentType,\n        },\n      },\n    }, null];\n  }\n\n  /**\n   * Start polling.\n   * Rejects returned promise if a WebHook is being used by this instance.\n   * @param  {Object} [options]\n   * @param  {Boolean} [options.restart=true] Consecutive calls to this method causes polling to be restarted\n   * @return {Promise}\n   */\n  startPolling(options = {}) {\n    if (this.hasOpenWebHook()) {\n      return Promise.reject(new errors.FatalError('Polling and WebHook are mutually exclusive'));\n    }\n    options.restart = typeof options.restart === 'undefined' ? true : options.restart;\n    if (!this._polling) {\n      this._polling = new TelegramBotPolling(this);\n    }\n    return this._polling.start(options);\n  }\n\n  /**\n   * Alias of `TelegramBot#startPolling()`. This is **deprecated**.\n   * @param  {Object} [options]\n   * @return {Promise}\n   * @deprecated\n   */\n  initPolling() {\n    deprecate('TelegramBot#initPolling() is deprecated. Use TelegramBot#startPolling() instead.');\n    return this.startPolling();\n  }\n\n  /**\n   * Stops polling after the last polling request resolves.\n   * Multiple invocations do nothing if polling is already stopped.\n   * Returning the promise of the last polling request is **deprecated**.\n   * @param  {Object} [options] Options\n   * @param  {Boolean} [options.cancel] Cancel current request\n   * @param  {String} [options.reason] Reason for stopping polling\n   * @return {Promise}\n   */\n  stopPolling(options) {\n    if (!this._polling) {\n      return Promise.resolve();\n    }\n    return this._polling.stop(options);\n  }\n\n  /**\n   * Get link for file.\n   * Use this method to get link for file for subsequent use.\n   * Attention: link will be valid for 1 hour.\n   *\n   * This method is a sugar extension of the (getFile)[#getfilefileid] method,\n   * which returns just path to file on remote server (you will have to manually build full uri after that).\n   *\n   * @param  {String} fileId  File identifier to get info about\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Promise which will have  *fileURI* in resolve callback\n   * @see https://core.telegram.org/bots/api#getfile\n   */\n  getFileLink(fileId, form = {}) {\n    return this.getFile(fileId, form)\n      .then(resp => `${this.options.baseApiUrl}/file/bot${this.token}/${resp.file_path}`);\n  }\n\n  /**\n   * Return a readable stream for file.\n   *\n   * `fileStream.path` is the specified file ID i.e. `fileId`.\n   * `fileStream` emits event `info` passing a single argument i.e.\n   * `info` with the interface `{ uri }` where `uri` is the URI of the\n   * file on Telegram servers.\n   *\n   * This method is a sugar extension of the [getFileLink](#TelegramBot+getFileLink) method,\n   * which returns the full URI to the file on remote server.\n   *\n   * @param  {String} fileId File identifier to get info about\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {stream.Readable} fileStream\n   */\n  getFileStream(fileId, form = {}) {\n    const fileStream = new stream.PassThrough();\n    fileStream.path = fileId;\n    this.getFileLink(fileId, form)\n      .then((fileURI) => {\n        fileStream.emit('info', {\n          uri: fileURI,\n        });\n        pump(streamedRequest(Object.assign({ uri: fileURI }, this.options.request)), fileStream);\n      })\n      .catch((error) => {\n        fileStream.emit('error', error);\n      });\n    return fileStream;\n  }\n\n  /**\n   * Downloads file in the specified folder.\n   *\n   * This method is a sugar extension of the [getFileStream](#TelegramBot+getFileStream) method,\n   * which returns a readable file stream.\n   *\n   * @param  {String} fileId  File identifier to get info about\n   * @param  {String} downloadDir Absolute path to the folder in which file will be saved\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Promise, which will have *filePath* of downloaded file in resolve callback\n   */\n  downloadFile(fileId, downloadDir, form = {}) {\n    let resolve;\n    let reject;\n    const promise = new Promise((a, b) => {\n      resolve = a;\n      reject = b;\n    });\n    const fileStream = this.getFileStream(fileId, form);\n    fileStream.on('info', (info) => {\n      const fileName = info.uri.slice(info.uri.lastIndexOf('/') + 1);\n      // TODO: Ensure fileName doesn't contains slashes\n      const filePath = path.join(downloadDir, fileName);\n      pump(fileStream, fs.createWriteStream(filePath), (error) => {\n        if (error) { return reject(error); }\n        return resolve(filePath);\n      });\n    });\n    fileStream.on('error', (err) => {\n      reject(err);\n    });\n    return promise;\n  }\n\n  /**\n   * Register a RegExp to test against an incomming text message.\n   * @param  {RegExp}   regexpRexecuted with `exec`.\n   * @param  {Function} callback     Callback will be called with 2 parameters,\n   * the `msg` and the result of executing `regexp.exec` on message text.\n   */\n  onText(regexp, callback) {\n    this._textRegexpCallbacks.push({ regexp, callback });\n  }\n\n  /**\n   * Remove a listener registered with `onText()`.\n   * @param  {RegExp} regexp RegExp used previously in `onText()`\n   * @return {Object} deletedListener The removed reply listener if\n   *   found. This object has `regexp` and `callback`\n   *   properties. If not found, returns `null`.\n   */\n  removeTextListener(regexp) {\n    const index = this._textRegexpCallbacks.findIndex((textListener) => {\n      return String(textListener.regexp) === String(regexp);\n    });\n    if (index === -1) {\n      return null;\n    }\n    return this._textRegexpCallbacks.splice(index, 1)[0];\n  }\n\n  /**\n   * Remove all listeners registered with `onText()`.\n   */\n  clearTextListeners() {\n    this._textRegexpCallbacks = [];\n  }\n\n  /**\n   * Register a reply to wait for a message response.\n   *\n   * @param  {Number|String} chatId The chat id where the message cames from.\n   * @param  {Number|String} messageId The message id to be replied.\n   * @param  {Function} callback Callback will be called with the reply\n   *  message.\n   * @return {Number} id The ID of the inserted reply listener.\n   */\n  onReplyToMessage(chatId, messageId, callback) {\n    const id = ++this._replyListenerId;\n    this._replyListeners.push({\n      id,\n      chatId,\n      messageId,\n      callback\n    });\n    return id;\n  }\n\n  /**\n   * Removes a reply that has been prev. registered for a message response.\n   * @param   {Number} replyListenerId The ID of the reply listener.\n   * @return  {Object} deletedListener The removed reply listener if\n   *   found. This object has `id`, `chatId`, `messageId` and `callback`\n   *   properties. If not found, returns `null`.\n   */\n  removeReplyListener(replyListenerId) {\n    const index = this._replyListeners.findIndex((replyListener) => {\n      return replyListener.id === replyListenerId;\n    });\n    if (index === -1) {\n      return null;\n    }\n    return this._replyListeners.splice(index, 1)[0];\n  }\n\n  /**\n   * Removes all replies that have been prev. registered for a message response.\n   *\n   * @return  {Array} deletedListeners An array of removed listeners.\n   */\n  clearReplyListeners() {\n    this._replyListeners = [];\n  }\n\n  /**\n   * Return true if polling. Otherwise, false.\n   *\n   * @return {Boolean}\n   */\n  isPolling() {\n    return this._polling ? this._polling.isPolling() : false;\n  }\n\n  /**\n   * Open webhook.\n   * Multiple invocations do nothing if webhook is already open.\n   * Rejects returned promise if Polling is being used by this instance.\n   *\n   * @return {Promise}\n   */\n  openWebHook() {\n    if (this.isPolling()) {\n      return Promise.reject(new errors.FatalError('WebHook and Polling are mutually exclusive'));\n    }\n    if (!this._webHook) {\n      this._webHook = new TelegramBotWebHook(this);\n    }\n    return this._webHook.open();\n  }\n\n  /**\n   * Close webhook after closing all current connections.\n   * Multiple invocations do nothing if webhook is already closed.\n   *\n   * @return {Promise} Promise\n   */\n  closeWebHook() {\n    if (!this._webHook) {\n      return Promise.resolve();\n    }\n    return this._webHook.close();\n  }\n\n  /**\n   * Return true if using webhook and it is open i.e. accepts connections.\n   * Otherwise, false.\n   *\n   * @return {Boolean}\n   */\n  hasOpenWebHook() {\n    return this._webHook ? this._webHook.isOpen() : false;\n  }\n\n\n  /**\n   * Process an update; emitting the proper events and executing regexp\n   * callbacks. This method is useful should you be using a different\n   * way to fetch updates, other than those provided by TelegramBot.\n   *\n   * @param  {Object} update\n   * @see https://core.telegram.org/bots/api#update\n   */\n  processUpdate(update) {\n    debug('Process Update %j', update);\n    const message = update.message;\n    const editedMessage = update.edited_message;\n    const channelPost = update.channel_post;\n    const editedChannelPost = update.edited_channel_post;\n    const inlineQuery = update.inline_query;\n    const chosenInlineResult = update.chosen_inline_result;\n    const callbackQuery = update.callback_query;\n    const shippingQuery = update.shipping_query;\n    const preCheckoutQuery = update.pre_checkout_query;\n    const poll = update.poll;\n    const pollAnswer = update.poll_answer;\n    const chatMember = update.chat_member;\n    const myChatMember = update.my_chat_member;\n    const chatJoinRequest = update.chat_join_request;\n\n    if (message) {\n      debug('Process Update message %j', message);\n      const metadata = {};\n      metadata.type = TelegramBot.messageTypes.find((messageType) => {\n        return message[messageType];\n      });\n      this.emit('message', message, metadata);\n      if (metadata.type) {\n        debug('Emitting %s: %j', metadata.type, message);\n        this.emit(metadata.type, message, metadata);\n      }\n      if (message.text) {\n        debug('Text message');\n        this._textRegexpCallbacks.some(reg => {\n          debug('Matching %s with %s', message.text, reg.regexp);\n          const result = reg.regexp.exec(message.text);\n          if (!result) {\n            return false;\n          }\n          // reset index so we start at the beginning of the regex each time\n          reg.regexp.lastIndex = 0;\n          debug('Matches %s', reg.regexp);\n          reg.callback(message, result);\n          // returning truthy value exits .some\n          return this.options.onlyFirstMatch;\n        });\n      }\n      if (message.reply_to_message) {\n        // Only callbacks waiting for this message\n        this._replyListeners.forEach(reply => {\n          // Message from the same chat\n          if (reply.chatId === message.chat.id) {\n            // Responding to that message\n            if (reply.messageId === message.reply_to_message.message_id) {\n              // Resolve the promise\n              reply.callback(message);\n            }\n          }\n        });\n      }\n    } else if (editedMessage) {\n      debug('Process Update edited_message %j', editedMessage);\n      this.emit('edited_message', editedMessage);\n      if (editedMessage.text) {\n        this.emit('edited_message_text', editedMessage);\n      }\n      if (editedMessage.caption) {\n        this.emit('edited_message_caption', editedMessage);\n      }\n    } else if (channelPost) {\n      debug('Process Update channel_post %j', channelPost);\n      this.emit('channel_post', channelPost);\n    } else if (editedChannelPost) {\n      debug('Process Update edited_channel_post %j', editedChannelPost);\n      this.emit('edited_channel_post', editedChannelPost);\n      if (editedChannelPost.text) {\n        this.emit('edited_channel_post_text', editedChannelPost);\n      }\n      if (editedChannelPost.caption) {\n        this.emit('edited_channel_post_caption', editedChannelPost);\n      }\n    } else if (inlineQuery) {\n      debug('Process Update inline_query %j', inlineQuery);\n      this.emit('inline_query', inlineQuery);\n    } else if (chosenInlineResult) {\n      debug('Process Update chosen_inline_result %j', chosenInlineResult);\n      this.emit('chosen_inline_result', chosenInlineResult);\n    } else if (callbackQuery) {\n      debug('Process Update callback_query %j', callbackQuery);\n      this.emit('callback_query', callbackQuery);\n    } else if (shippingQuery) {\n      debug('Process Update shipping_query %j', shippingQuery);\n      this.emit('shipping_query', shippingQuery);\n    } else if (preCheckoutQuery) {\n      debug('Process Update pre_checkout_query %j', preCheckoutQuery);\n      this.emit('pre_checkout_query', preCheckoutQuery);\n    } else if (poll) {\n      debug('Process Update poll %j', poll);\n      this.emit('poll', poll);\n    } else if (pollAnswer) {\n      debug('Process Update poll_answer %j', pollAnswer);\n      this.emit('poll_answer', pollAnswer);\n    } else if (chatMember) {\n      debug('Process Update chat_member %j', chatMember);\n      this.emit('chat_member', chatMember);\n    } else if (myChatMember) {\n      debug('Process Update my_chat_member %j', myChatMember);\n      this.emit('my_chat_member', myChatMember);\n    } else if (chatJoinRequest) {\n      debug('Process Update my_chat_member %j', chatJoinRequest);\n      this.emit('chat_join_request', chatJoinRequest);\n    }\n  }\n\n  /** Start Telegram Bot API methods */\n\n  /**\n  * Use this method to receive incoming updates using long polling.\n  * This method has an [older, compatible signature][getUpdates-v0.25.0]\n  * that is being deprecated.\n  *\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise}\n  * @see https://core.telegram.org/bots/api#getupdates\n  */\n  getUpdates(form = {}) {\n    /* The older method signature was getUpdates(timeout, limit, offset).\n     * We need to ensure backwards-compatibility while maintaining\n     * consistency of the method signatures throughout the library */\n    if (typeof form !== 'object') {\n      /* eslint-disable no-param-reassign, prefer-rest-params */\n      deprecate('The method signature getUpdates(timeout, limit, offset) has been deprecated since v0.25.0');\n      form = {\n        timeout: arguments[0],\n        limit: arguments[1],\n        offset: arguments[2],\n      };\n      /* eslint-enable no-param-reassign, prefer-rest-params */\n    }\n\n    return this._request('getUpdates', { form });\n  }\n\n  /**\n   * Specify an url to receive incoming updates via an outgoing webHook.\n   * This method has an [older, compatible signature][setWebHook-v0.25.0]\n   * that is being deprecated.\n   *\n   * @param  {String} url URL where Telegram will make HTTP Post. Leave empty to\n   * delete webHook.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {String|stream.Stream} [options.certificate] PEM certificate key (public).\n   * @param  {String} [options.secret_token] Optional secret token to be sent in a header `X-Telegram-Bot-Api-Secret-Token` in every webhook request.\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#setwebhook\n   * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n   */\n  setWebHook(url, options = {}, fileOptions = {}) {\n    /* The older method signature was setWebHook(url, cert).\n     * We need to ensure backwards-compatibility while maintaining\n     * consistency of the method signatures throughout the library */\n    let cert;\n    // Note: 'options' could be an object, if a stream was provided (in place of 'cert')\n    if (typeof options !== 'object' || options instanceof stream.Stream) {\n      deprecate('The method signature setWebHook(url, cert) has been deprecated since v0.25.0');\n      cert = options;\n      options = {}; // eslint-disable-line no-param-reassign\n    } else {\n      cert = options.certificate;\n    }\n\n    const opts = {\n      qs: options,\n    };\n    opts.qs.url = url;\n\n    if (cert) {\n      try {\n        const sendData = this._formatSendData('certificate', cert, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.certificate = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n    }\n\n    return this._request('setWebHook', opts);\n  }\n\n  /**\n   * Use this method to remove webhook integration if you decide to\n   * switch back to getUpdates. Returns True on success.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#deletewebhook\n   */\n  deleteWebHook(form = {}) {\n    return this._request('deleteWebhook', { form });\n  }\n\n  /**\n   * Use this method to get current webhook status.\n   * On success, returns a [WebhookInfo](https://core.telegram.org/bots/api#webhookinfo) object.\n   * If the bot is using getUpdates, will return an object with the\n   * url field empty.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#getwebhookinfo\n   */\n  getWebHookInfo(form = {}) {\n    return this._request('getWebhookInfo', { form });\n  }\n\n  /**\n   * A simple method for testing your bot's authentication token. Requires no parameters.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} basic information about the bot in form of a [User](https://core.telegram.org/bots/api#user) object.\n   * @see https://core.telegram.org/bots/api#getme\n   */\n  getMe(form = {}) {\n    return this._request('getMe', { form });\n  }\n\n  /**\n   * This method log out your bot from the cloud Bot API server before launching the bot locally.\n   * You must log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates.\n   * After a successful call, you will not be able to log in again using the same token for 10 minutes.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}  True on success\n   * @see https://core.telegram.org/bots/api#logout\n   */\n  logOut(form = {}) {\n    return this._request('logOut', { form });\n  }\n\n  /**\n   * This method close the bot instance before moving it from one local server to another.\n   * This method will return error 429 in the first 10 minutes after the bot is launched.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}  True on success\n   * @see https://core.telegram.org/bots/api#close\n   */\n  close(form = {}) {\n    return this._request('close', { form });\n  }\n\n  /**\n   * Send text message.\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} text Text of the message to be sent\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#sendmessage\n   */\n  sendMessage(chatId, text, form = {}) {\n    form.chat_id = chatId;\n    form.text = text;\n    return this._request('sendMessage', { form });\n  }\n\n  /**\n   * Forward messages of any kind.\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * or username of the target channel (in the format `@channelusername`)\n   * @param  {Number|String} fromChatId Unique identifier for the chat where the\n   * original message was sent (or channel username in the format `@channelusername`)\n   * @param  {Number|String} messageId  Unique message identifier in the chat specified in fromChatId\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#forwardmessage\n   */\n  forwardMessage(chatId, fromChatId, messageId, form = {}) {\n    form.chat_id = chatId;\n    form.from_chat_id = fromChatId;\n    form.message_id = messageId;\n    return this._request('forwardMessage', { form });\n  }\n\n  /**\n   * Copy messages of any kind. **Service messages and invoice messages can't be copied.**\n   * The method is analogous to the method forwardMessages, but the copied message doesn't\n   * have a link to the original message.\n   * Returns the MessageId of the sent message on success.\n   * @param  {Number|String} chatId     Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Number|String} fromChatId Unique identifier for the chat where the\n   * original message was sent\n   * @param  {Number|String} messageId  Unique message identifier\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} The [MessageId](https://core.telegram.org/bots/api#messageid) of the sent message on success\n   * @see https://core.telegram.org/bots/api#copymessage\n   */\n  copyMessage(chatId, fromChatId, messageId, form = {}) {\n    form.chat_id = chatId;\n    form.from_chat_id = fromChatId;\n    form.message_id = messageId;\n    return this._request('copyMessage', { form });\n  }\n\n  /**\n   * Send photo\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String|stream.Stream|Buffer} photo A file path or a Stream. Can\n   * also be a `file_id` previously uploaded\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#sendphoto\n   * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n   */\n  sendPhoto(chatId, photo, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options,\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('photo', photo, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.photo = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendPhoto', opts);\n  }\n\n  /**\n  * Send audio\n  *\n  * **Your audio must be in the .MP3 or .M4A format.**\n  *\n  * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n  * @param  {String|stream.Stream|Buffer} audio A file path, Stream or Buffer.\n  * Can also be a `file_id` previously uploaded.\n  * @param  {Object} [options] Additional Telegram query options\n  * @param  {Object} [fileOptions] Optional file related meta-data\n  * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n  * @see https://core.telegram.org/bots/api#sendaudio\n  * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n  */\n  sendAudio(chatId, audio, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n\n    opts.qs.chat_id = chatId;\n\n    try {\n      const sendData = this._formatSendData('audio', audio, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.audio = sendData[1];\n      this._fixAddFileThumbnail(options, opts);\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n\n    return this._request('sendAudio', opts);\n  }\n\n  /**\n  * Send Document\n  * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n  * @param  {String|stream.Stream|Buffer} doc A file path, Stream or Buffer.\n  * Can also be a `file_id` previously uploaded.\n  * @param  {Object} [options] Additional Telegram query options\n  * @param  {Object} [fileOptions] Optional file related meta-data\n  * @return {Promise}  On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n  * @see https://core.telegram.org/bots/api#sendDocument\n  * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n  */\n  sendDocument(chatId, doc, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('document', doc, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.document = sendData[1];\n      this._fixAddFileThumbnail(options, opts);\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n\n    return this._request('sendDocument', opts);\n  }\n\n  /**\n   * Use this method to send video files, **Telegram clients support mp4 videos** (other formats may be sent as Document).\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String|stream.Stream|Buffer} video A file path or Stream.\n   * Can also be a `file_id` previously uploaded.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#sendvideo\n   * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n   */\n  sendVideo(chatId, video, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('video', video, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.video = sendData[1];\n      this._fixAddFileThumbnail(options, opts);\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendVideo', opts);\n  }\n\n  /**\n   * Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound).\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String|stream.Stream|Buffer} animation A file path, Stream or Buffer.\n   * Can also be a `file_id` previously uploaded.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#sendanimation\n   * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n   */\n  sendAnimation(chatId, animation, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('animation', animation, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.animation = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendAnimation', opts);\n  }\n\n  /**\n   * Send voice\n   *\n   * **Your audio must be in an .OGG file encoded with OPUS** (other formats may be sent as Audio or Document)\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String|stream.Stream|Buffer} voice A file path, Stream or Buffer.\n   * Can also be a `file_id` previously uploaded.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#sendvoice\n   * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n   */\n  sendVoice(chatId, voice, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('voice', voice, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.voice = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendVoice', opts);\n  }\n\n  /**\n   * Use this method to send video messages\n   * Telegram clients support **rounded square MPEG4 videos** of up to 1 minute long.\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String|stream.Stream|Buffer} videoNote A file path or Stream.\n   * Can also be a `file_id` previously uploaded.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @info The length parameter is actually optional. However, the API (at time of writing) requires you to always provide it until it is fixed.\n   * @see https://core.telegram.org/bots/api#sendvideonote\n   * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n  */\n  sendVideoNote(chatId, videoNote, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('video_note', videoNote, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.video_note = sendData[1];\n      this._fixAddFileThumbnail(options, opts);\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendVideoNote', opts);\n  }\n\n  /**\n   * Use this method to send a group of photos or videos as an album.\n   *\n   * **Documents and audio files can be only grouped in an album with messages of the same type**\n   *\n   * If you wish to [specify file options](https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files),\n   * add a `fileOptions` property to the target input in `media`.\n   *\n   * @param  {String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Array} media A JSON-serialized array describing photos and videos to be sent, must include 2–10 items\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, an array of the sent [Messages](https://core.telegram.org/bots/api#message)\n   * is returned.\n   * @see https://core.telegram.org/bots/api#sendmediagroup\n   * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n   */\n  sendMediaGroup(chatId, media, options = {}) {\n    const opts = {\n      qs: options,\n    };\n    opts.qs.chat_id = chatId;\n\n    opts.formData = {};\n    const inputMedia = [];\n    let index = 0;\n    for (const input of media) {\n      const payload = Object.assign({}, input);\n      delete payload.media;\n      delete payload.fileOptions;\n      try {\n        const attachName = String(index);\n        const [formData, fileId] = this._formatSendData(attachName, input.media, input.fileOptions);\n        if (formData) {\n          opts.formData[attachName] = formData[attachName];\n          payload.media = `attach://${attachName}`;\n        } else {\n          payload.media = fileId;\n        }\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      inputMedia.push(payload);\n      index++;\n    }\n    opts.qs.media = stringify(inputMedia);\n\n    return this._request('sendMediaGroup', opts);\n  }\n\n\n  /**\n   * Send location.\n   * Use this method to send point on the map.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Float} latitude Latitude of location\n   * @param  {Float} longitude Longitude of location\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#sendlocation\n   */\n  sendLocation(chatId, latitude, longitude, form = {}) {\n    form.chat_id = chatId;\n    form.latitude = latitude;\n    form.longitude = longitude;\n    return this._request('sendLocation', { form });\n  }\n\n  /**\n   * Use this method to edit live location messages sent by\n   * the bot or via the bot (for inline bots).\n   *\n   *  A location **can be edited until its live_period expires or editing is explicitly disabled by a call to [stopMessageLiveLocation](https://core.telegram.org/bots/api#stopmessagelivelocation)**\n   *\n   * Note that you must provide one of chat_id, message_id, or\n   * inline_message_id in your request.\n   *\n   * @param  {Float} latitude Latitude of location\n   * @param  {Float} longitude Longitude of location\n   * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n   * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned.\n   * @see https://core.telegram.org/bots/api#editmessagelivelocation\n   */\n  editMessageLiveLocation(latitude, longitude, form = {}) {\n    form.latitude = latitude;\n    form.longitude = longitude;\n    return this._request('editMessageLiveLocation', { form });\n  }\n\n  /**\n   * Use this method to stop updating a live location message sent by\n   * the bot or via the bot (for inline bots) before live_period expires.\n   *\n   * Note that you must provide one of chat_id, message_id, or\n   * inline_message_id in your request.\n   *\n   * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n   * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned.\n   * @see https://core.telegram.org/bots/api#stopmessagelivelocation\n   */\n  stopMessageLiveLocation(form = {}) {\n    return this._request('stopMessageLiveLocation', { form });\n  }\n\n  /**\n   * Send venue.\n   * Use this method to send information about a venue.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Float} latitude Latitude of location\n   * @param  {Float} longitude Longitude of location\n   * @param  {String} title Name of the venue\n   * @param  {String} address Address of the venue\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned.\n   * @see https://core.telegram.org/bots/api#sendvenue\n   */\n  sendVenue(chatId, latitude, longitude, title, address, form = {}) {\n    form.chat_id = chatId;\n    form.latitude = latitude;\n    form.longitude = longitude;\n    form.title = title;\n    form.address = address;\n    return this._request('sendVenue', { form });\n  }\n\n  /**\n   * Send contact.\n   * Use this method to send phone contacts.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} phoneNumber Contact's phone number\n   * @param  {String} firstName Contact's first name\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#sendcontact\n   */\n  sendContact(chatId, phoneNumber, firstName, form = {}) {\n    form.chat_id = chatId;\n    form.phone_number = phoneNumber;\n    form.first_name = firstName;\n    return this._request('sendContact', { form });\n  }\n\n  /**\n   * Send poll.\n   * Use this method to send a native poll.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the group/channel\n   * @param  {String} question Poll question, 1-300 characters\n   * @param  {Array} pollOptions Poll options, between 2-10 options (only 1-100 characters each)\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#sendpoll\n   */\n  sendPoll(chatId, question, pollOptions, form = {}) {\n    form.chat_id = chatId;\n    form.question = question;\n    form.options = stringify(pollOptions);\n    return this._request('sendPoll', { form });\n  }\n\n  /**\n   * Send Dice\n   * Use this method to send an animated emoji that will display a random value.\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}  On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#senddice\n   */\n  sendDice(chatId, options = {}) {\n    const opts = {\n      qs: options,\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('dice');\n      opts.formData = sendData[0];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendDice', opts);\n  }\n\n\n  /**\n   * Send chat action.\n   *\n   * Use this method when you need to tell the user that something is happening on the bot's side.\n   * **The status is set for 5 seconds or less** (when a message arrives from your bot, Telegram clients clear its typing status).\n   *\n   *  Action `typing` for [text messages](https://core.telegram.org/bots/api#sendmessage),\n   * `upload_photo` for [photos](https://core.telegram.org/bots/api#sendphoto), `record_video` or `upload_video` for [videos](https://core.telegram.org/bots/api#sendvideo),\n   * `record_voice` or `upload_voice` for [voice notes](https://core.telegram.org/bots/api#sendvoice), `upload_document` for [general files](https://core.telegram.org/bots/api#senddocument),\n   * `choose_sticker` for [stickers](https://core.telegram.org/bots/api#sendsticker), `find_location` for [location data](https://core.telegram.org/bots/api#sendlocation),\n   * `record_video_note` or `upload_video_note` for [video notes](https://core.telegram.org/bots/api#sendvideonote).\n   *\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} action Type of action to broadcast.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#sendchataction\n   */\n  sendChatAction(chatId, action, form = {}) {\n    form.chat_id = chatId;\n    form.action = action;\n    return this._request('sendChatAction', { form });\n  }\n\n  /**\n   * Use this method to get a list of profile pictures for a user.\n   * Returns a [UserProfilePhotos](https://core.telegram.org/bots/api#userprofilephotos) object.\n   * This method has an [older, compatible signature][getUserProfilePhotos-v0.25.0]\n   * that is being deprecated.\n   *\n   * @param  {Number} userId  Unique identifier of the target user\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}  Returns a [UserProfilePhotos](https://core.telegram.org/bots/api#userprofilephotos) object\n   * @see https://core.telegram.org/bots/api#getuserprofilephotos\n   */\n  getUserProfilePhotos(userId, form = {}) {\n    /* The older method signature was getUserProfilePhotos(userId, offset, limit).\n     * We need to ensure backwards-compatibility while maintaining\n     * consistency of the method signatures throughout the library */\n    if (typeof form !== 'object') {\n      /* eslint-disable no-param-reassign, prefer-rest-params */\n      deprecate('The method signature getUserProfilePhotos(userId, offset, limit) has been deprecated since v0.25.0');\n      form = {\n        offset: arguments[1],\n        limit: arguments[2],\n      };\n      /* eslint-enable no-param-reassign, prefer-rest-params */\n    }\n    form.user_id = userId;\n    return this._request('getUserProfilePhotos', { form });\n  }\n\n  /**\n   * Get file.\n   * Use this method to get basic info about a file and prepare it for downloading.\n   *\n   * Attention: **link will be valid for 1 hour.**\n   *\n   * @param  {String} fileId  File identifier to get info about\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, a [File](https://core.telegram.org/bots/api#file) object is returned\n   * @see https://core.telegram.org/bots/api#getfile\n   */\n  getFile(fileId, form = {}) {\n    form.file_id = fileId;\n    return this._request('getFile', { form });\n  }\n\n  /**\n    * Use this method to ban a user in a group, a supergroup or a channel.\n    * In the case of supergroups and channels, the user will not be able to\n    * return to the chat on their own using invite links, etc., unless unbanned first..\n    *\n    * The **bot must be an administrator in the group, supergroup or a channel** for this to work.\n    *\n    *\n    * @param  {Number|String} chatId   Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n    * @param  {Number} userId  Unique identifier of the target user\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success.\n    * @see https://core.telegram.org/bots/api#banchatmember\n    */\n  banChatMember(chatId, userId, form = {}) {\n    form.chat_id = chatId;\n    form.user_id = userId;\n    return this._request('banChatMember', { form });\n  }\n\n  /**\n  * Use this method to unban a previously kicked user in a supergroup.\n  * The user will not return to the group automatically, but will be\n  * able to join via link, etc.\n  *\n  * The **bot must be an administrator** in the supergroup or channel for this to work.\n  *\n  * **By default**, this method guarantees that after the call the user is not a member of the chat, but will be able to join it.\n  * So **if the user is a member of the chat they will also be removed from the chat**. If you don't want this, use the parameter *only_if_banned*\n  *\n  * @param  {Number|String} chatId   Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n  * @param  {Number} userId  Unique identifier of the target user\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#unbanchatmember\n  */\n  unbanChatMember(chatId, userId, form = {}) {\n    form.chat_id = chatId;\n    form.user_id = userId;\n    return this._request('unbanChatMember', { form });\n  }\n\n  /**\n  * Use this method to restrict a user in a supergroup.\n  * The bot **must be an administrator in the supergroup** for this to work\n  * and must have the appropriate admin rights. Pass True for all boolean parameters\n  * to lift restrictions from a user. Returns True on success.\n  *\n  * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n  * @param  {Number} userId Unique identifier of the target user\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#restrictchatmember\n  */\n  restrictChatMember(chatId, userId, form = {}) {\n    form.chat_id = chatId;\n    form.user_id = userId;\n    return this._request('restrictChatMember', { form });\n  }\n\n  /**\n   * Use this method to promote or demote a user in a supergroup or a channel.\n   * The bot **must be an administrator** in the chat for this to work\n   * and must have the appropriate admin rights. Pass False for all boolean parameters to demote a user.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Number} userId\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success.\n   * @see https://core.telegram.org/bots/api#promotechatmember\n   */\n  promoteChatMember(chatId, userId, form = {}) {\n    form.chat_id = chatId;\n    form.user_id = userId;\n    return this._request('promoteChatMember', { form });\n  }\n\n  /**\n   * Use this method to set a custom title for an administrator in a supergroup promoted by the bot.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Number} userId Unique identifier of the target user\n   * @param  {String} customTitle New custom title for the administrator; 0-16 characters, emoji are not allowed\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setchatadministratorcustomtitle\n   */\n  setChatAdministratorCustomTitle(chatId, userId, customTitle, form = {}) {\n    form.chat_id = chatId;\n    form.user_id = userId;\n    form.custom_title = customTitle;\n    return this._request('setChatAdministratorCustomTitle', { form });\n  }\n\n\n  /**\n   * Use this method to ban a channel chat in a supergroup or a channel.\n   *\n   * Until the chat is [unbanned](https://core.telegram.org/bots/api#unbanchatsenderchat), the owner of the banned chat won't be able to send messages on behalf of any of their channels.\n   * The bot **must be an administrator in the supergroup or channel** for this to work and must have the appropriate administrator rights\n   *\n   * @param  {Number|String} chatId   Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Number} senderChatId  Unique identifier of the target user\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success.\n   * @see https://core.telegram.org/bots/api#banchatsenderchat\n   */\n  banChatSenderChat(chatId, senderChatId, form = {}) {\n    form.chat_id = chatId;\n    form.sender_chat_id = senderChatId;\n    return this._request('banChatSenderChat', { form });\n  }\n\n  /**\n  * Use this method to unban a previously banned channel chat in a supergroup or channel.\n  *\n  * The bot **must be an administrator** for this to work and must have the appropriate administrator rights.\n  *\n  * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n  * @param  {Number} senderChatId Unique identifier of the target user\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#unbanchatsenderchat\n  */\n  unbanChatSenderChat(chatId, senderChatId, form = {}) {\n    form.chat_id = chatId;\n    form.sender_chat_id = senderChatId;\n    return this._request('unbanChatSenderChat', { form });\n  }\n\n  /**\n   * Use this method to set default chat permissions for all members.\n   *\n   * The bot **must be an administrator in the group or a supergroup** for this to\n   * work and **must have the `can_restrict_members` admin rights.**\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Array} chatPermissions New default chat permissions\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setchatpermissions\n   */\n  setChatPermissions(chatId, chatPermissions, form = {}) {\n    form.chat_id = chatId;\n    form.permissions = stringify(chatPermissions);\n    return this._request('setChatPermissions', { form });\n  }\n\n  /**\n   * Use this method to generate a new primary invite link for a chat. **Any previously generated primary link is revoked**.\n   *\n   * The bot **must be an administrator in the chat** for this to work and must have the appropriate administrator rights.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Exported invite link as String on success.\n   * @see https://core.telegram.org/bots/api#exportchatinvitelink\n   */\n  exportChatInviteLink(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('exportChatInviteLink', { form });\n  }\n\n  /**\n   * Use this method to create an additional invite link for a chat.\n   *\n   * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n   *\n   * The link generated with this method can be revoked using the method [revokeChatInviteLink](https://core.telegram.org/bots/api#revokechatinvitelink)\n   *\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Object} The new invite link as [ChatInviteLink](https://core.telegram.org/bots/api#chatinvitelink) object\n   * @see https://core.telegram.org/bots/api#createchatinvitelink\n   */\n  createChatInviteLink(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('createChatInviteLink', { form });\n  }\n\n  /**\n   * Use this method to edit a non-primary invite link created by the bot.\n   *\n   * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} inviteLink Text with the invite link to edit\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} The edited invite link as a [ChatInviteLink](https://core.telegram.org/bots/api#chatinvitelink) object\n   * @see https://core.telegram.org/bots/api#editchatinvitelink\n   */\n  editChatInviteLink(chatId, inviteLink, form = {}) {\n    form.chat_id = chatId;\n    form.invite_link = inviteLink;\n    return this._request('editChatInviteLink', { form });\n  }\n\n  /**\n   * Use this method to revoke an invite link created by the bot.\n   * Note: If the primary link is revoked, a new link is automatically generated\n   *\n   * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} inviteLink The invite link to revoke\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} The revoked invite link as [ChatInviteLink](https://core.telegram.org/bots/api#chatinvitelink) object\n   * @see https://core.telegram.org/bots/api#revokechatinvitelink\n   */\n  revokeChatInviteLink(chatId, inviteLink, form = {}) {\n    form.chat_id = chatId;\n    form.invite_link = inviteLink;\n    return this._request('revokeChatInviteLink', { form });\n  }\n\n  /**\n   * Use this method to approve a chat join request.\n   *\n   * The bot **must be an administrator in the chat** for this to work and **must have the `can_invite_users` administrator right.**\n   *\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Number} userId  Unique identifier of the target user\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#approvechatjoinrequest\n   */\n  approveChatJoinRequest(chatId, userId, form = {}) {\n    form.chat_id = chatId;\n    form.user_id = userId;\n    return this._request('approveChatJoinRequest', { form });\n  }\n\n  /**\n   * Use this method to decline a chat join request.\n   *\n   * The bot **must be an administrator in the chat** for this to work and **must have the `can_invite_users` administrator right**.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Number} userId  Unique identifier of the target user\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#declinechatjoinrequest\n   */\n  declineChatJoinRequest(chatId, userId, form = {}) {\n    form.chat_id = chatId;\n    form.user_id = userId;\n    return this._request('declineChatJoinRequest', { form });\n  }\n\n  /**\n   * Use this method to set a new profile photo for the chat. **Photos can't be changed for private chats**.\n   *\n   * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {stream.Stream|Buffer} photo A file path or a Stream.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setchatphoto\n   */\n  setChatPhoto(chatId, photo, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options,\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('photo', photo, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.photo = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('setChatPhoto', opts);\n  }\n\n  /**\n  * Use this method to delete a chat photo. **Photos can't be changed for private chats**.\n  *\n  * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n  *\n  * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#deletechatphoto\n  */\n  deleteChatPhoto(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('deleteChatPhoto', { form });\n  }\n\n  /**\n   * Use this method to change the title of a chat. **Titles can't be changed for private chats**.\n   *\n   * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} title New chat title, 1-255 characters\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setchattitle\n   */\n  setChatTitle(chatId, title, form = {}) {\n    form.chat_id = chatId;\n    form.title = title;\n    return this._request('setChatTitle', { form });\n  }\n\n  /**\n   * Use this method to change the description of a group, a supergroup or a channel.\n   *\n   * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} description New chat title, 0-255 characters\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setchatdescription\n   */\n  setChatDescription(chatId, description, form = {}) {\n    form.chat_id = chatId;\n    form.description = description;\n    return this._request('setChatDescription', { form });\n  }\n\n  /**\n   * Use this method to pin a message in a supergroup.\n   *\n   * If the chat is not a private chat, the **bot must be an administrator in the chat** for this to work and must have the `can_pin_messages` administrator\n   * right in a supergroup or `can_edit_messages` administrator right in a channel.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Number} messageId Identifier of a message to pin\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#pinchatmessage\n   */\n  pinChatMessage(chatId, messageId, form = {}) {\n    form.chat_id = chatId;\n    form.message_id = messageId;\n    return this._request('pinChatMessage', { form });\n  }\n\n  /**\n   * Use this method to remove a message from the list of pinned messages in a chat\n   *\n   * If the chat is not a private chat, the **bot must be an administrator in the chat** for this to work and must have the `can_pin_messages` administrator\n   * right in a supergroup or `can_edit_messages` administrator right in a channel.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#unpinchatmessage\n   */\n  unpinChatMessage(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('unpinChatMessage', { form });\n  }\n\n  /**\n  * Use this method to clear the list of pinned messages in a chat.\n  *\n  * If the chat is not a private chat, the **bot must be an administrator in the chat** for this to work and must have the `can_pin_messages` administrator\n  * right in a supergroup or `can_edit_messages` administrator right in a channel.\n  *\n  * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#unpinallchatmessages\n  */\n  unpinAllChatMessages(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('unpinAllChatMessages', { form });\n  }\n\n  /**\n   * Use this method for your bot to leave a group, supergroup or channel\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#leavechat\n   */\n  leaveChat(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('leaveChat', { form });\n  }\n\n  /**\n   * Use this method to get up to date information about the chat\n   * (current name of the user for one-on-one conversations, current\n   * username of a user, group or channel, etc.).\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`) or channel\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} [Chat](https://core.telegram.org/bots/api#chat) object on success\n   * @see https://core.telegram.org/bots/api#getchat\n   */\n  getChat(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('getChat', { form });\n  }\n\n  /**\n   * Use this method to get a list of administrators in a chat\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, returns an Array of [ChatMember](https://core.telegram.org/bots/api#chatmember) objects that contains information about all chat administrators except other bots.\n   * If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned\n   * @see https://core.telegram.org/bots/api#getchatadministrators\n   */\n  getChatAdministrators(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('getChatAdministrators', { form });\n  }\n\n  /**\n  * Use this method to get the number of members in a chat.\n  *\n  * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise} Int on success\n  * @see https://core.telegram.org/bots/api#getchatmembercount\n  */\n  getChatMemberCount(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('getChatMemberCount', { form });\n  }\n\n  /**\n   * Use this method to get information about a member of a chat.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n   * @param  {Number} userId  Unique identifier of the target user\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} [ChatMember](https://core.telegram.org/bots/api#chatmember) object on success\n   * @see https://core.telegram.org/bots/api#getchatmember\n   */\n  getChatMember(chatId, userId, form = {}) {\n    form.chat_id = chatId;\n    form.user_id = userId;\n    return this._request('getChatMember', { form });\n  }\n\n  /**\n   * Use this method to set a new group sticker set for a supergroup.\n   *\n   * The bot **must be an administrator in the chat** for this to work and must have the appropriate administrator rights.\n   *\n   * **Note:** Use the field `can_set_sticker_set` optionally returned in [getChat](https://core.telegram.org/bots/api#getchat) requests to check if the bot can use this method.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param  {String} stickerSetName Name of the sticker set to be set as the group sticker set\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setchatstickerset\n   */\n  setChatStickerSet(chatId, stickerSetName, form = {}) {\n    form.chat_id = chatId;\n    form.sticker_set_name = stickerSetName;\n    return this._request('setChatStickerSet', { form });\n  }\n\n\n  /**\n   * Use this method to delete a group sticker set from a supergroup.\n   *\n   * Use the field `can_set_sticker_set` optionally returned in [getChat](https://core.telegram.org/bots/api#getchat) requests to check if the bot can use this method.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#deletechatstickerset\n   */\n  deleteChatStickerSet(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('deleteChatStickerSet', { form });\n  }\n\n  /**\n   * Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Array of [Sticker](https://core.telegram.org/bots/api#sticker) objects\n   * @see https://core.telegram.org/bots/api#getforumtopiciconstickers\n   */\n  getForumTopicIconStickers(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('getForumTopicIconStickers', { form });\n  }\n\n  /**\n   * Use this method to create a topic in a forum supergroup chat.\n   * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n   *\n   * Returns information about the created topic as a [ForumTopic](https://core.telegram.org/bots/api#forumtopic) object.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param  {String} name Topic name, 1-128 characters\n   * @param  {Object} [options] Additional Telegram query options\n   * @see https://core.telegram.org/bots/api#createforumtopic\n   */\n  createForumTopic(chatId, name, form = {}) {\n    form.chat_id = chatId;\n    form.name = name;\n    return this._request('createForumTopic', { form });\n  }\n\n  /**\n   * Use this method to edit name and icon of a topic in a forum supergroup chat.\n   * The bot must be an administrator in the chat for this to work and must have can_manage_topics administrator rights, unless it is the creator of the topic.\n   *\n   * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n   * @param {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#editforumtopic\n   */\n  editForumTopic(chatId, messageThreadId, form = {}) {\n    form.chat_id = chatId;\n    form.message_thread_id = messageThreadId;\n    return this._request('editForumTopic', { form });\n  }\n\n  /**\n   * Use this method to close an open topic in a forum supergroup chat.\n   * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic.\n   *\n   * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n   * @param {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#closeforumtopic\n   */\n  closeForumTopic(chatId, messageThreadId, form = {}) {\n    form.chat_id = chatId;\n    form.message_thread_id = messageThreadId;\n    return this._request('closeForumTopic', { form });\n  }\n\n  /**\n   * Use this method to reopen a closed topic in a forum supergroup chat.\n   * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic.\n   *\n   * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n   * @param {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#reopenforumtopic\n   */\n  reopenForumTopic(chatId, messageThreadId, form = {}) {\n    form.chat_id = chatId;\n    form.message_thread_id = messageThreadId;\n    return this._request('reopenForumTopic', { form });\n  }\n\n  /**\n   * Use this method to delete a forum topic along with all its messages in a forum supergroup chat.\n   * The bot must be an administrator in the chat for this to work and must have the can_delete_messages administrator rights.\n   *\n   * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n   * @param {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#deleteforumtopic\n   */\n  deleteForumTopic(chatId, messageThreadId, form = {}) {\n    form.chat_id = chatId;\n    form.message_thread_id = messageThreadId;\n    return this._request('deleteForumTopic', { form });\n  }\n\n  /**\n   * Use this method to clear the list of pinned messages in a forum topic.\n   * The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup.\n   *\n   * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n   * @param {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#unpinallforumtopicmessages\n   */\n  unpinAllForumTopicMessages(chatId, messageThreadId, form = {}) {\n    form.chat_id = chatId;\n    form.message_thread_id = messageThreadId;\n    return this._request('unpinAllForumTopicMessages', { form });\n  }\n\n  /**\n  * Use this method to edit the name of the 'General' topic in a forum supergroup chat.\n  * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n  * The topic will be automatically unhidden if it was hidden.\n  *\n  * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n  * @param {String} name New topic name, 1-128 characters\n  * @param {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#editgeneralforumtopic\n  */\n  editGeneralForumTopic(chatId, name, form = {}) {\n    form.chat_id = chatId;\n    form.name = name;\n    return this._request('editGeneralForumTopic', { form });\n  }\n\n  /**\n  * Use this method to close an open 'General' topic in a forum supergroup chat.\n  * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n  * The topic will be automatically unhidden if it was hidden.\n  *\n  * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n  * @param {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#closegeneralforumtopic\n  */\n  closeGeneralForumTopic(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('closeGeneralForumTopic', { form });\n  }\n\n  /**\n  * Use this method to reopen a closed 'General' topic in a forum supergroup chat.\n  * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n  * The topic will be automatically unhidden if it was hidden.\n  *\n  * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n  * @param {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#reopengeneralforumtopic\n  */\n  reopenGeneralForumTopic(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('reopenGeneralForumTopic', { form });\n  }\n\n  /**\n  * Use this method to hide the 'General' topic in a forum supergroup chat.\n  * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n  * The topic will be automatically closed if it was open.\n  *\n  * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n  * @param {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#hidegeneralforumtopic\n  */\n  hideGeneralForumTopic(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('hideGeneralForumTopic', { form });\n  }\n\n  /**\n   * Use this method to unhide the 'General' topic in a forum supergroup chat.\n   * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights\n   *\n   * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#unhidegeneralforumtopic\n   */\n  unhideGeneralForumTopic(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('unhideGeneralForumTopic', { form });\n  }\n\n  /**\n   * Use this method to clear the list of pinned messages in a General forum topic.\n   * The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup.\n   *\n   * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#unpinallgeneralforumtopicmessages\n   */\n  unpinAllGeneralForumTopicMessages(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('unhideGeneralForumTopic', { form });\n  }\n\n  /**\n   * Use this method to send answers to callback queries sent from\n   * [inline keyboards](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating).\n   *\n   * The answer will be displayed to the user as a notification at the top of the chat screen or as an alert.\n   *\n   * This method has **older, compatible signatures ([1][answerCallbackQuery-v0.27.1])([2][answerCallbackQuery-v0.29.0])**\n   * that are being deprecated.\n   *\n   * @param  {String} callbackQueryId Unique identifier for the query to be answered\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#answercallbackquery\n   */\n  answerCallbackQuery(callbackQueryId, form = {}) {\n    /* The older method signature (in/before v0.27.1) was answerCallbackQuery(callbackQueryId, text, showAlert).\n     * We need to ensure backwards-compatibility while maintaining\n     * consistency of the method signatures throughout the library */\n    if (typeof form !== 'object') {\n      /* eslint-disable no-param-reassign, prefer-rest-params */\n      deprecate('The method signature answerCallbackQuery(callbackQueryId, text, showAlert) has been deprecated since v0.27.1');\n      form = {\n        callback_query_id: arguments[0],\n        text: arguments[1],\n        show_alert: arguments[2],\n      };\n      /* eslint-enable no-param-reassign, prefer-rest-params */\n    }\n    /* The older method signature (in/before v0.29.0) was answerCallbackQuery([options]).\n     * We need to ensure backwards-compatibility while maintaining\n     * consistency of the method signatures throughout the library. */\n    if (typeof callbackQueryId === 'object') {\n      /* eslint-disable no-param-reassign, prefer-rest-params */\n      deprecate('The method signature answerCallbackQuery([options]) has been deprecated since v0.29.0');\n      form = callbackQueryId;\n      /* eslint-enable no-param-reassign, prefer-rest-params */\n    } else {\n      form.callback_query_id = callbackQueryId;\n    }\n    return this._request('answerCallbackQuery', { form });\n  }\n\n  /**\n   * Use this method to change the list of the bot's commands.\n   *\n   * See https://core.telegram.org/bots#commands for more details about bot commands\n   *\n   * @param  {Array} commands  List of bot commands to be set as the list of the [bot's commands](https://core.telegram.org/bots/api#botcommand). At most 100 commands can be specified.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setmycommands\n   */\n  setMyCommands(commands, form = {}) {\n    form.commands = stringify(commands);\n\n    if (form.scope) {\n      form.scope = stringify(form.scope);\n    }\n\n    return this._request('setMyCommands', { form });\n  }\n\n  /**\n   * Use this method to delete the list of the bot's commands for the given scope and user language.\n   *\n   *  After deletion, [higher level commands](https://core.telegram.org/bots/api#determining-list-of-commands) will be shown to affected users.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#deletemycommands\n   */\n  deleteMyCommands(form = {}) {\n    return this._request('deleteMyCommands', { form });\n  }\n\n\n  /**\n   * Use this method to get the current list of the bot's commands for the given scope and user language.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Array of [BotCommand](https://core.telegram.org/bots/api#botcommand) on success. If commands aren't set, an empty list is returned.\n   * @see https://core.telegram.org/bots/api#getmycommands\n   */\n  getMyCommands(form = {}) {\n    if (form.scope) {\n      form.scope = stringify(form.scope);\n    }\n    return this._request('getMyCommands', { form });\n  }\n\n  /**\n   * Use this method to change the bot's name.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setmyname\n   */\n  setMyName(form = {}) {\n    return this._request('setMyName', { form });\n  }\n\n  /**\n   * Use this method to get the current bot name for the given user language.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} [BotName](https://core.telegram.org/bots/api#botname) on success\n   * @see https://core.telegram.org/bots/api#getmyname\n   */\n  getMyName(form = {}) {\n    return this._request('getMyName', { form });\n  }\n\n  /**\n   * Use this method to change the bot's description, which is shown in the chat with the bot if the chat is empty.\n   *\n   * Returns True on success.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setmydescription\n   */\n  setMyDescription(form = {}) {\n    return this._request('setMyDescription', { form });\n  }\n\n  /**\n   * Use this method to get the current bot description for the given user language.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Returns [BotDescription](https://core.telegram.org/bots/api#botdescription) on success.\n   * @see https://core.telegram.org/bots/api#getmydescription\n   */\n  getMyDescription(form = {}) {\n    return this._request('getMyDescription', { form });\n  }\n\n  /**\n   * Use this method to change the bot's short description, which is shown on the bot's profile page\n   * and is sent together with the link when users share the bot.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Returns True on success.\n   * @see https://core.telegram.org/bots/api#setmyshortdescription\n   */\n  setMyShortDescription(form = {}) {\n    return this._request('setMyShortDescription', { form });\n  }\n\n  /**\n   * Use this method to get the current bot short description for the given user language.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Returns [BotShortDescription](https://core.telegram.org/bots/api#botshortdescription) on success.\n   * @see https://core.telegram.org/bots/api#getmyshortdescription\n   */\n  getMyShortDescription(form = {}) {\n    return this._request('getMyShortDescription', { form });\n  }\n\n  /**\n   * Use this method to change the bot's menu button in a private chat, or the default menu button.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setchatmenubutton\n   */\n  setChatMenuButton(form = {}) {\n    return this._request('setChatMenuButton', { form });\n  }\n\n  /**\n   * Use this method to get the current value of the bot's menu button in a private chat, or the default menu button.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} [MenuButton](https://core.telegram.org/bots/api#menubutton) on success\n   * @see https://core.telegram.org/bots/api#getchatmenubutton\n   */\n  getChatMenuButton(form = {}) {\n    return this._request('getChatMenuButton', { form });\n  }\n\n  /**\n   * Use this method to change the default administrator rights requested by the bot when it's added as an administrator to groups or channels.\n   *\n   * These rights will be suggested to users, but they are are free to modify the list before adding the bot.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#getchatmenubutton\n   */\n  setMyDefaultAdministratorRights(form = {}) {\n    return this._request('setMyDefaultAdministratorRights', { form });\n  }\n\n  /**\n   * Use this method to get the current default administrator rights of the bot.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} [ChatAdministratorRights](https://core.telegram.org/bots/api#chatadministratorrights) on success\n   * @see https://core.telegram.org/bots/api#getmydefaultadministratorrights\n   */\n  getMyDefaultAdministratorRights(form = {}) {\n    return this._request('getMyDefaultAdministratorRights', { form });\n  }\n\n  /**\n   * Use this method to edit text or [game](https://core.telegram.org/bots/api#games) messages sent by the bot or via the bot (for inline bots).\n   *\n   * Note: that **you must provide one of chat_id, message_id, or inline_message_id** in your request.\n   *\n   * @param  {String} text  New text of the message\n   * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n   * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n   * @see https://core.telegram.org/bots/api#editmessagetext\n   */\n  editMessageText(text, form = {}) {\n    form.text = text;\n    return this._request('editMessageText', { form });\n  }\n\n  /**\n   * Use this method to edit captions of messages sent by the bot or via the bot (for inline bots).\n   *\n   * Note: You **must provide one of chat_id, message_id, or inline_message_id** in your request.\n   *\n   * @param  {String} caption  New caption of the message\n   * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n   * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n   * @see https://core.telegram.org/bots/api#editmessagecaption\n   */\n  editMessageCaption(caption, form = {}) {\n    form.caption = caption;\n    return this._request('editMessageCaption', { form });\n  }\n\n  /**\n   * Use this method to edit animation, audio, document, photo, or video messages.\n   *\n   * If a message is a part of a message album, then it can be edited only to a photo or a video.\n   *\n   * Otherwise, message type can be changed arbitrarily. When inline message is edited, new file can't be uploaded.\n   * Use previously uploaded file via its file_id or specify a URL.\n   *\n   * Note: You **must provide one of chat_id, message_id, or inline_message_id** in your request.\n   *\n   * @param  {Object} media  A JSON-serialized object for a new media content of the message\n   * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n   * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n   * @see https://core.telegram.org/bots/api#editmessagemedia\n   */\n  editMessageMedia(media, form = {}) {\n    const regexAttach = /attach:\\/\\/.+/;\n\n    if (typeof media.media === 'string' && regexAttach.test(media.media)) {\n      const opts = {\n        qs: form,\n      };\n\n      opts.formData = {};\n\n      const payload = Object.assign({}, media);\n      delete payload.media;\n\n      try {\n        const attachName = String(0);\n        const [formData] = this._formatSendData(\n          attachName,\n          media.media.replace('attach://', ''),\n          media.fileOptions\n        );\n\n        if (formData) {\n          opts.formData[attachName] = formData[attachName];\n          payload.media = `attach://${attachName}`;\n        } else {\n          throw new errors.FatalError(`Failed to process the replacement action for your ${media.type}`);\n        }\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n\n      opts.qs.media = stringify(payload);\n\n      return this._request('editMessageMedia', opts);\n    }\n\n    form.media = stringify(media);\n\n    return this._request('editMessageMedia', { form });\n  }\n\n  /**\n   * Use this method to edit only the reply markup of messages sent by the bot or via the bot (for inline bots).\n   *\n   * Note: You **must provide one of chat_id, message_id, or inline_message_id** in your request.\n   *\n   * @param  {Object} replyMarkup  A JSON-serialized object for an inline keyboard.\n   * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n   * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n   * @see https://core.telegram.org/bots/api#editmessagetext\n   */\n  editMessageReplyMarkup(replyMarkup, form = {}) {\n    form.reply_markup = replyMarkup;\n    return this._request('editMessageReplyMarkup', { form });\n  }\n\n\n  /**\n   * Use this method to stop a poll which was sent by the bot.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the group/channel\n   * @param  {Number} pollId Identifier of the original message with the poll\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, the stopped [Poll](https://core.telegram.org/bots/api#poll) is returned\n   * @see https://core.telegram.org/bots/api#stoppoll\n   */\n  stopPoll(chatId, pollId, form = {}) {\n    form.chat_id = chatId;\n    form.message_id = pollId;\n    return this._request('stopPoll', { form });\n  }\n\n  /**\n   * Use this method to delete a message, including service messages, with the following limitations:\n   * - A message can only be deleted if it was sent less than 48 hours ago.\n   * - A dice message can only be deleted if it was sent more than 24 hours ago.\n   * - Bots can delete outgoing messages in groups and supergroups.\n   * - Bots can delete incoming messages in groups, supergroups and channels.\n   * - Bots granted `can_post_messages` permissions can delete outgoing messages in channels.\n   * - If the bot is an administrator of a group, it can delete any message there.\n   * - If the bot has `can_delete_messages` permission in a supergroup, it can delete any message there.\n   *\n   * @param  {Number|String} chatId  Unique identifier of the target chat\n   * @param  {Number} messageId  Unique identifier of the target message\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#deletemessage\n   */\n  deleteMessage(chatId, messageId, form = {}) {\n    form.chat_id = chatId;\n    form.message_id = messageId;\n    return this._request('deleteMessage', { form });\n  }\n\n  /**\n   * Use this method to send static .WEBP, [animated](https://telegram.org/blog/animated-stickers) .TGS,\n   * or [video](https://telegram.org/blog/video-stickers-better-reactions) .WEBM stickers.\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String|stream.Stream|Buffer} sticker A file path, Stream or Buffer.\n   * Can also be a `file_id` previously uploaded. Stickers are WebP format files.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned\n   * @see https://core.telegram.org/bots/api#sendsticker\n   */\n  sendSticker(chatId, sticker, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('sticker', sticker, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.sticker = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendSticker', opts);\n  }\n\n  /**\n   * Use this method to get a sticker set.\n   *\n   * @param  {String} name Name of the sticker set\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, a [StickerSet](https://core.telegram.org/bots/api#stickerset) object is returned\n   * @see https://core.telegram.org/bots/api#getstickerset\n   */\n  getStickerSet(name, form = {}) {\n    form.name = name;\n    return this._request('getStickerSet', { form });\n  }\n\n  /**\n   * Use this method to get information about custom emoji stickers by their identifiers.\n   *\n   * @param  {Array} custom_emoji_ids List of custom emoji identifiers. At most 200 custom emoji identifiers can be specified.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Array of [Sticker](https://core.telegram.org/bots/api#sticker) objects.\n   * @see https://core.telegram.org/bots/api#getcustomemojistickers\n   */\n  getCustomEmojiStickers(customEmojiIds, form = {}) {\n    form.custom_emoji_ids = stringify(customEmojiIds);\n    return this._request('getCustomEmojiStickers', { form });\n  }\n\n  /**\n   * Use this method to upload a file with a sticker for later use in *createNewStickerSet* and *addStickerToSet* methods (can be used multiple\n   * times).\n   *\n   * @param  {Number} userId User identifier of sticker file owner\n   * @param  {String|stream.Stream|Buffer} sticker A file path or a Stream with the sticker in .WEBP, .PNG, .TGS, or .WEBM format. Can also be a `file_id` previously uploaded.\n   * @param {String} stickerFormat Allow values:  `static`, `animated` or `video`\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} On success, a [File](https://core.telegram.org/bots/api#file) object is returned\n   * @see https://core.telegram.org/bots/api#uploadstickerfile\n   */\n  uploadStickerFile(userId, sticker, stickerFormat = 'static', options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options,\n    };\n    opts.qs.user_id = userId;\n    opts.qs.sticker_format = stickerFormat;\n\n    try {\n      const sendData = this._formatSendData('sticker', sticker, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.sticker = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('uploadStickerFile', opts);\n  }\n\n  /**\n   * Use this method to create new sticker set owned by a user.\n   *\n   * The bot will be able to edit the created sticker set.\n   *\n   * You must use exactly one of the fields *png_sticker*, *tgs_sticker*, or *webm_sticker*\n   *\n   * @param  {Number} userId User identifier of created sticker set owner\n   * @param  {String} name Short name of sticker set, to be used in `t.me/addstickers/` URLs (e.g.,   *\"animals\"*). Can contain only english letters, digits and underscores.\n   *  Must begin with a letter, can't contain consecutive underscores and must end in `\"_by_<bot_username>\"`. `<bot_username>` is case insensitive. 1-64 characters.\n\n   * @param  {String} title Sticker set title, 1-64 characters\n   * @param  {String|stream.Stream|Buffer} pngSticker Png image with the sticker, must be up to 512 kilobytes in size,\n   *  dimensions must not exceed 512px, and either width or height must be exactly 512px.\n   * @param  {String} emojis One or more emoji corresponding to the sticker\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise}  True on success\n   * @see https://core.telegram.org/bots/api#createnewstickerset\n   */\n  createNewStickerSet(userId, name, title, pngSticker, emojis, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options,\n    };\n    opts.qs.user_id = userId;\n    opts.qs.name = name;\n    opts.qs.title = title;\n    opts.qs.emojis = emojis;\n    opts.qs.mask_position = stringify(options.mask_position);\n    try {\n      const sendData = this._formatSendData('png_sticker', pngSticker, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.png_sticker = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('createNewStickerSet', opts);\n  }\n\n  /**\n   * Use this method to add a new sticker to a set created by the bot.\n   *\n   * You must use exactly one of the fields *png_sticker*, *tgs_sticker*, or *webm_sticker*\n   *\n   * Animated stickers can be added to animated sticker sets and only to them:\n   * - Animated sticker sets can have up to 50 stickers.\n   * - Static sticker sets can have up to 120 stickers\n   *\n   * @param  {Number} userId User identifier of sticker set owner\n   * @param  {String} name Sticker set name\n   * @param  {String|stream.Stream|Buffer} sticker Png image with the sticker (must be up to 512 kilobytes in size,\n   * dimensions must not exceed 512px, and either width or height must be exactly 512px, [TGS animation](https://core.telegram.org/stickers#animated-sticker-requirements)\n   * with the sticker or [WEBM video](https://core.telegram.org/stickers#video-sticker-requirements) with the sticker.\n   * @param  {String} emojis One or more emoji corresponding to the sticker\n   * @param  {String} stickerType Allow values: `png_sticker`, `tgs_sticker`, or `webm_sticker`.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise}  True on success\n   * @see https://core.telegram.org/bots/api#addstickertoset\n   */\n  addStickerToSet(userId, name, sticker, emojis, stickerType = 'png_sticker', options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options,\n    };\n    opts.qs.user_id = userId;\n    opts.qs.name = name;\n    opts.qs.emojis = emojis;\n    opts.qs.mask_position = stringify(options.mask_position);\n\n    if (typeof stickerType !== 'string' || ['png_sticker', 'tgs_sticker', 'webm_sticker'].indexOf(stickerType) === -1) {\n      return Promise.reject(new Error('stickerType must be a string and the allow types is: png_sticker, tgs_sticker, webm_sticker'));\n    }\n\n    try {\n      const sendData = this._formatSendData(stickerType, sticker, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs[stickerType] = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('addStickerToSet', opts);\n  }\n\n  /**\n   * Use this method to move a sticker in a set created by the bot to a specific position.\n   *\n   * @param  {String} sticker File identifier of the sticker\n   * @param  {Number} position New sticker position in the set, zero-based\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setstickerpositioninset\n   */\n  setStickerPositionInSet(sticker, position, form = {}) {\n    form.sticker = sticker;\n    form.position = position;\n    return this._request('setStickerPositionInSet', { form });\n  }\n\n  /**\n   * Use this method to delete a sticker from a set created by the bot.\n   *\n   * @param  {String} sticker File identifier of the sticker\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#deletestickerfromset\n   * @todo Add tests for this method!\n   */\n  deleteStickerFromSet(sticker, form = {}) {\n    form.sticker = sticker;\n    return this._request('deleteStickerFromSet', { form });\n  }\n\n\n  /**\n   * Use this method to change the list of emoji assigned to a regular or custom emoji sticker.\n   *\n   * The sticker must belong to a sticker set created by the bot.\n   *\n   * @param  {String} sticker File identifier of the sticker\n   * @param { Array } emojiList A JSON-serialized list of 1-20 emoji associated with the sticker\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setstickeremojilist\n   */\n  setStickerEmojiList(sticker, emojiList, form = {}) {\n    form.sticker = sticker;\n    form.emoji_list = stringify(emojiList);\n    return this._request('setStickerEmojiList', { form });\n  }\n\n  /**\n   * Use this method to change the list of emoji assigned to a `regular` or `custom emoji` sticker.\n   *\n   * The sticker must belong to a sticker set created by the bot.\n   *\n   * @param  {String} sticker File identifier of the sticker\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setstickerkeywords\n   */\n  setStickerKeywords(sticker, form = {}) {\n    form.sticker = sticker;\n    if (form.keywords) {\n      form.keywords = stringify(form.keywords);\n    }\n    return this._request('setStickerKeywords', { form });\n  }\n\n  /**\n   * Use this method to change the [mask position](https://core.telegram.org/bots/api#maskposition) of a mask sticker.\n   *\n   * The sticker must belong to a sticker set created by the bot.\n   *\n   * @param  {String} sticker File identifier of the sticker\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setstickermaskposition\n   */\n  setStickerMaskPosition(sticker, form = {}) {\n    form.sticker = sticker;\n    if (form.mask_position) {\n      form.mask_position = stringify(form.mask_position);\n    }\n    return this._request('setStickerMaskPosition', { form });\n  }\n\n  /**\n   * Use this method to set the title of a created sticker set.\n   *\n   * The sticker must belong to a sticker set created by the bot.\n   *\n   * @param  {String} name Sticker set name\n   * @param  {String} title Sticker set title, 1-64 characters\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setstickersettitle\n   */\n  setStickerSetTitle(name, title, form = {}) {\n    form.name = name;\n    form.title = title;\n    return this._request('setStickerSetTitle', { form });\n  }\n\n  /**\n   * Use this method to add a thumb to a set created by the bot.\n   *\n   * Animated thumbnails can be set for animated sticker sets only. Video thumbnails can be set only for video sticker sets only\n   *\n   * @param  {Number} userId User identifier of sticker set owner\n   * @param  {String} name Sticker set name\n   * @param  {String|stream.Stream|Buffer} thumbnail A .WEBP or .PNG image with the thumbnail,\n   * must be up to 128 kilobytes in size and have width and height exactly 100px,\n   * a TGS animation with the thumbnail up to 32 kilobytes in size or a WEBM video with the thumbnail up to 32 kilobytes in size.\n   *\n   * Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram\n   * to get a file from the Internet, or upload a new one. Animated sticker set thumbnails can't be uploaded via HTTP URL.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setstickersetthumbnail\n   */\n  setStickerSetThumbnail(userId, name, thumbnail, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options,\n    };\n    opts.qs.user_id = userId;\n    opts.qs.name = name;\n    opts.qs.mask_position = stringify(options.mask_position);\n    try {\n      const sendData = this._formatSendData('thumbnail', thumbnail, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.thumbnail = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('setStickerSetThumbnail', opts);\n  }\n\n\n  /**\n   * Use this method to set the thumbnail of a custom emoji sticker set.\n   *\n   * The sticker must belong to a sticker set created by the bot.\n   *\n   * @param  {String} name Sticker set name\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setcustomemojistickersetthumbnail\n   */\n  setCustomEmojiStickerSetThumbnail(name, form = {}) {\n    form.name = name;\n    return this._request('setCustomEmojiStickerSetThumbnail', { form });\n  }\n\n  /**\n   * Use this method to delete a sticker set that was created by the bot.\n   *\n   * The sticker must belong to a sticker set created by the bot.\n   *\n   * @param  {String} name Sticker set name\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#deletestickerset\n   */\n  deleteStickerSet(name, form = {}) {\n    form.name = name;\n    return this._request('deleteStickerSet', { form });\n  }\n\n  /**\n   * Send answers to an inline query.\n   *\n   * Note: No more than 50 results per query are allowed.\n   *\n   * @param  {String} inlineQueryId Unique identifier of the query\n   * @param  {InlineQueryResult[]} results An array of results for the inline query\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, True is returned\n   * @see https://core.telegram.org/bots/api#answerinlinequery\n   */\n  answerInlineQuery(inlineQueryId, results, form = {}) {\n    form.inline_query_id = inlineQueryId;\n    form.results = stringify(results);\n    return this._request('answerInlineQuery', { form });\n  }\n\n  /**\n   * Use this method to set the result of an interaction with a [Web App](https://core.telegram.org/bots/webapps)\n   * and send a corresponding message on behalf of the user to the chat from which the query originated.\n   *\n   * @param  {String} webAppQueryId Unique identifier for the query to be answered\n   * @param  {InlineQueryResult} result object that represents one result of an inline query\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, a [SentWebAppMessage](https://core.telegram.org/bots/api#sentwebappmessage) object is returned\n   * @see https://core.telegram.org/bots/api#answerwebappquery\n   */\n  answerWebAppQuery(webAppQueryId, result, form = {}) {\n    form.web_app_query_id = webAppQueryId;\n    form.result = stringify(result);\n    return this._request('answerWebAppQuery', { form });\n  }\n\n  /**\n   * Use this method to send an invoice.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} title Product name, 1-32 characters\n   * @param  {String} description Product description, 1-255 characters\n   * @param  {String} payload Bot defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.\n   * @param  {String} providerToken Payments provider token, obtained via `@BotFather`\n   * @param  {String} currency Three-letter ISO 4217 currency code\n   * @param  {Array} prices Breakdown of prices\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned\n   * @see https://core.telegram.org/bots/api#sendinvoice\n   */\n  sendInvoice(chatId, title, description, payload, providerToken, currency, prices, form = {}) {\n    form.chat_id = chatId;\n    form.title = title;\n    form.description = description;\n    form.payload = payload;\n    form.provider_token = providerToken;\n    form.currency = currency;\n    form.prices = stringify(prices);\n    form.provider_data = stringify(form.provider_data);\n    if (form.suggested_tip_amounts) {\n      form.suggested_tip_amounts = stringify(form.suggested_tip_amounts);\n    }\n    return this._request('sendInvoice', { form });\n  }\n\n  /**\n  * Use this method to create a link for an invoice.\n  *\n  * @param {String} title Product name, 1-32 characters\n  * @param {String} description Product description, 1-255 characters\n  * @param {String} payload Bot defined invoice payload\n  * @param {String} providerToken Payment provider token\n  * @param {String} currency Three-letter ISO 4217 currency code\n  * @param {Array} prices Breakdown of prices\n  * @param {Object} [options] Additional Telegram query options\n  * @returns {Promise} The created invoice link as String on success.\n  * @see https://core.telegram.org/bots/api#createinvoicelink\n  */\n  createInvoiceLink(title, description, payload, providerToken, currency, prices, form = {}) {\n    form.title = title;\n    form.description = description;\n    form.payload = payload;\n    form.provider_token = providerToken;\n    form.currency = currency;\n    form.prices = stringify(prices);\n    return this._request('createInvoiceLink', { form });\n  }\n\n  /**\n  * Use this method to reply to shipping queries.\n  *\n  * If you sent an invoice requesting a shipping address and the parameter is_flexible was specified,\n  * the Bot API will send an [Update](https://core.telegram.org/bots/api#update) with a shipping_query field to the bot\n  *\n  * @param  {String} shippingQueryId  Unique identifier for the query to be answered\n  * @param  {Boolean} ok Specify if delivery of the product is possible\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise} On success, True is returned\n  * @see https://core.telegram.org/bots/api#answershippingquery\n  */\n  answerShippingQuery(shippingQueryId, ok, form = {}) {\n    form.shipping_query_id = shippingQueryId;\n    form.ok = ok;\n    form.shipping_options = stringify(form.shipping_options);\n    return this._request('answerShippingQuery', { form });\n  }\n\n  /**\n   * Use this method to respond to such pre-checkout queries\n   *\n   * Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of\n   * an [Update](https://core.telegram.org/bots/api#update) with the field *pre_checkout_query*.\n   *\n   * **Note:** The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.\n   *\n   * @param  {String} preCheckoutQueryId  Unique identifier for the query to be answered\n   * @param  {Boolean} ok Specify if every order details are ok\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, True is returned\n   * @see https://core.telegram.org/bots/api#answerprecheckoutquery\n   */\n  answerPreCheckoutQuery(preCheckoutQueryId, ok, form = {}) {\n    form.pre_checkout_query_id = preCheckoutQueryId;\n    form.ok = ok;\n    return this._request('answerPreCheckoutQuery', { form });\n  }\n\n  /**\n   * Use this method to send a game.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} gameShortName name of the game to be sent. Set up your games via `@BotFather`.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned\n   * @see https://core.telegram.org/bots/api#sendgame\n   */\n  sendGame(chatId, gameShortName, form = {}) {\n    form.chat_id = chatId;\n    form.game_short_name = gameShortName;\n    return this._request('sendGame', { form });\n  }\n\n  /**\n   * Use this method to set the score of the specified user in a game message.\n   *\n   * @param  {Number} userId  Unique identifier of the target user\n   * @param  {Number} score New score value, must be non-negative\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, if the message is not an inline message, the [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n   * @see https://core.telegram.org/bots/api#setgamescore\n   */\n  setGameScore(userId, score, form = {}) {\n    form.user_id = userId;\n    form.score = score;\n    return this._request('setGameScore', { form });\n  }\n\n  /**\n   * Use this method to get data for high score tables.\n   *\n   * Will return the score of the specified user and several of their neighbors in a game.\n   *\n   * @param  {Number} userId  Unique identifier of the target user\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, returns an Array of [GameHighScore](https://core.telegram.org/bots/api#gamehighscore) objects\n   * @see https://core.telegram.org/bots/api#getgamehighscores\n   */\n  getGameHighScores(userId, form = {}) {\n    form.user_id = userId;\n    return this._request('getGameHighScores', { form });\n  }\n}\n\nmodule.exports = TelegramBot;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5894, "column": 0}, "map": {"version":3,"sources":["file:///C:/Project/Fiba/photobot/node_modules/node-telegram-bot-api/index.js"],"sourcesContent":["/**\n * If running on Nodejs 5.x and below, we load the transpiled code.\n * Otherwise, we use the ES6 code.\n * We are deprecating support for Node.js v5.x and below.\n */\nconst majorVersion = parseInt(process.versions.node.split('.')[0], 10);\nif (majorVersion <= 5) {\n  const deprecate = require('./src/utils').deprecate;\n  deprecate('Node.js v5.x and below will no longer be supported in the future');\n  module.exports = require('./lib/telegram');\n} else {\n  module.exports = require('./src/telegram');\n}\n"],"names":[],"mappings":"AAAA;;;;CAIC,GACD,MAAM,eAAe,SAAS,QAAQ,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE;AACnE,IAAI,gBAAgB,GAAG;IACrB,MAAM,YAAY,8GAAuB,SAAS;IAClD,UAAU;IACV,OAAO,OAAO;AAChB,OAAO;IACL,OAAO,OAAO;AAChB","ignoreList":[0],"debugId":null}}]
}